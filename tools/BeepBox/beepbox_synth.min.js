var beepbox;!function(t){class s{}function e(t){let s=0;for(let e=0;e<t.length;e++)s+=t[e];const e=s/t.length;let i=0,h=0;for(let s=0;s<t.length;s++)i+=h,h=t[s]-e,t[s]=i;return t.push(0),new Float64Array(t)}function i(e){let i=s.chipNoises[e].samples;if(null==i){if(i=new Float32Array(s.chipNoiseLength+1),s.chipNoises[e].samples=i,0==e){let t=1;for(let e=0;e<s.chipNoiseLength;e++){i[e]=2*(1&t)-1;let s=t>>1;1==(t+s&1)&&(s+=16384),t=s}}else if(1==e)for(let t=0;t<s.chipNoiseLength;t++)i[t]=2*Math.random()-1;else if(2==e){let t=1;for(let e=0;e<s.chipNoiseLength;e++){i[e]=2*(1&t)-1;let s=t>>1;1==(t+s&1)&&(s+=32768),t=s}}else if(3==e){let t=1;for(let e=0;e<s.chipNoiseLength;e++){i[e]=2*(1&t)-1;let s=t>>1;1==(t+s&1)&&(s+=40),t=s}}else{if(4!=e)throw new Error("Unrecognized drum index: "+e);h(i,10,11,1,1,0),h(i,11,14,.6578,.6578,0),t.inverseRealFourierTransform(i,s.chipNoiseLength),t.scaleElementsByFactor(i,1/Math.sqrt(s.chipNoiseLength))}i[s.chipNoiseLength]=i[0]}return i}function h(t,e,h,n,o,r){const a=0|Math.pow(2,e),l=Math.min(s.chipNoiseLength>>1,0|Math.pow(2,h)),c=i(0);let f=0;for(let i=a;i<l;i++){let a=n+(o-n)*(Math.log(i)/Math.LN2-e)/(h-e),l=Math.pow(2,(a-1)*s.spectrumMax+1)*a;f+=l*=Math.pow(i/2048,r),l*=c[i];const u=.61803398875*i*i*Math.PI*2;t[i]=Math.cos(u)*l,t[s.chipNoiseLength-i]=Math.sin(u)*l}return f}function n(t){const s={};for(let e=0;e<t.length;e++){const i=t[e];i.index=e,s[i.name]=i}const e=t;return e.dictionary=s,e}s.scales=n([{name:"easy :)",realName:"pentatonic major",flags:[!0,!1,!0,!1,!0,!1,!1,!0,!1,!0,!1,!1]},{name:"easy :(",realName:"pentatonic minor",flags:[!0,!1,!1,!0,!1,!0,!1,!0,!1,!1,!0,!1]},{name:"island :)",realName:"ryukyu",flags:[!0,!1,!1,!1,!0,!0,!1,!0,!1,!1,!1,!0]},{name:"island :(",realName:"pelog selisir",flags:[!0,!0,!1,!0,!1,!1,!1,!0,!0,!1,!1,!1]},{name:"blues :)",realName:"blues major",flags:[!0,!1,!0,!0,!0,!1,!1,!0,!1,!0,!1,!1]},{name:"blues :(",realName:"blues",flags:[!0,!1,!1,!0,!1,!0,!0,!0,!1,!1,!0,!1]},{name:"normal :)",realName:"ionian",flags:[!0,!1,!0,!1,!0,!0,!1,!0,!1,!0,!1,!0]},{name:"normal :(",realName:"aeolian",flags:[!0,!1,!0,!0,!1,!0,!1,!0,!0,!1,!0,!1]},{name:"dbl harmonic :)",realName:"double harmonic major",flags:[!0,!0,!1,!1,!0,!0,!1,!0,!0,!1,!1,!0]},{name:"dbl harmonic :(",realName:"double harmonic minor",flags:[!0,!1,!0,!0,!1,!1,!0,!0,!0,!1,!1,!0]},{name:"strange",realName:"whole tone",flags:[!0,!1,!0,!1,!0,!1,!0,!1,!0,!1,!0,!1]},{name:"expert",realName:"chromatic",flags:[!0,!0,!0,!0,!0,!0,!0,!0,!0,!0,!0,!0]}]),s.keys=n([{name:"C",isWhiteKey:!0,basePitch:12},{name:"C♯",isWhiteKey:!1,basePitch:13},{name:"D",isWhiteKey:!0,basePitch:14},{name:"D♯",isWhiteKey:!1,basePitch:15},{name:"E",isWhiteKey:!0,basePitch:16},{name:"F",isWhiteKey:!0,basePitch:17},{name:"F♯",isWhiteKey:!1,basePitch:18},{name:"G",isWhiteKey:!0,basePitch:19},{name:"G♯",isWhiteKey:!1,basePitch:20},{name:"A",isWhiteKey:!0,basePitch:21},{name:"A♯",isWhiteKey:!1,basePitch:22},{name:"B",isWhiteKey:!0,basePitch:23}]),s.blackKeyNameParents=[-1,1,-1,1,-1,1,-1,-1,1,-1,1,-1],s.tempoMin=30,s.tempoMax=300,s.reverbRange=4,s.beatsPerBarMin=3,s.beatsPerBarMax=16,s.barCountMin=1,s.barCountMax=128,s.instrumentsPerChannelMin=1,s.instrumentsPerChannelMax=10,s.partsPerBeat=24,s.ticksPerPart=2,s.rhythms=n([{name:"÷3 (triplets)",stepsPerBeat:3,ticksPerArpeggio:4,arpeggioPatterns:[[0],[0,0,1,1],[0,1,2,1]],roundUpThresholds:[5,12,18]},{name:"÷4 (standard)",stepsPerBeat:4,ticksPerArpeggio:3,arpeggioPatterns:[[0],[0,0,1,1],[0,1,2,1]],roundUpThresholds:[3,9,17,21]},{name:"÷6",stepsPerBeat:6,ticksPerArpeggio:4,arpeggioPatterns:[[0],[0,1],[0,1,2,1]],roundUpThresholds:null},{name:"÷8",stepsPerBeat:8,ticksPerArpeggio:3,arpeggioPatterns:[[0],[0,1],[0,1,2,1]],roundUpThresholds:null},{name:"freehand",stepsPerBeat:24,ticksPerArpeggio:3,arpeggioPatterns:[[0],[0,1],[0,1,2,1]],roundUpThresholds:null}]),s.instrumentTypeNames=["chip","FM","noise","spectrum","drumset","harmonics","PWM"],s.instrumentTypeHasSpecialInterval=[!0,!0,!1,!1,!1,!0,!1],s.chipWaves=n([{name:"rounded",volume:.94,samples:e([0,.2,.4,.5,.6,.7,.8,.85,.9,.95,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,.95,.9,.85,.8,.7,.6,.5,.4,.2,0,-.2,-.4,-.5,-.6,-.7,-.8,-.85,-.9,-.95,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-.95,-.9,-.85,-.8,-.7,-.6,-.5,-.4,-.2])},{name:"triangle",volume:1,samples:e([1/15,.2,5/15,7/15,.6,11/15,13/15,1,1,13/15,11/15,.6,7/15,5/15,.2,1/15,-1/15,-.2,-5/15,-7/15,-.6,-11/15,-13/15,-1,-1,-13/15,-11/15,-.6,-7/15,-5/15,-.2,-1/15])},{name:"square",volume:.5,samples:e([1,-1])},{name:"1/4 pulse",volume:.5,samples:e([1,-1,-1,-1])},{name:"1/8 pulse",volume:.5,samples:e([1,-1,-1,-1,-1,-1,-1,-1])},{name:"sawtooth",volume:.65,samples:e([1/31,3/31,5/31,7/31,9/31,11/31,13/31,15/31,17/31,19/31,21/31,23/31,25/31,27/31,29/31,1,-1,-29/31,-27/31,-25/31,-23/31,-21/31,-19/31,-17/31,-15/31,-13/31,-11/31,-9/31,-7/31,-5/31,-3/31,-1/31])},{name:"double saw",volume:.5,samples:e([0,-.2,-.4,-.6,-.8,-1,1,-.8,-.6,-.4,-.2,1,.8,.6,.4,.2])},{name:"double pulse",volume:.4,samples:e([1,1,1,1,1,-1,-1,-1,1,1,1,1,-1,-1,-1,-1])},{name:"spiky",volume:.4,samples:e([1,-1,1,-1,1,0])}]),s.chipNoises=n([{name:"retro",volume:.25,basePitch:69,pitchFilterMult:1024,isSoft:!1,samples:null},{name:"white",volume:1,basePitch:69,pitchFilterMult:8,isSoft:!0,samples:null},{name:"clang",volume:.4,basePitch:69,pitchFilterMult:1024,isSoft:!1,samples:null},{name:"buzz",volume:.3,basePitch:69,pitchFilterMult:1024,isSoft:!1,samples:null},{name:"hollow",volume:1.5,basePitch:96,pitchFilterMult:1,isSoft:!0,samples:null}]),s.filterCutoffMaxHz=8e3,s.filterCutoffMinHz=1,s.filterMax=.95,s.filterMaxResonance=.95,s.filterCutoffRange=11,s.filterResonanceRange=8,s.transitions=n([{name:"seamless",isSeamless:!0,attackSeconds:0,releases:!1,releaseTicks:1,slides:!1,slideTicks:3},{name:"hard",isSeamless:!1,attackSeconds:0,releases:!1,releaseTicks:3,slides:!1,slideTicks:3},{name:"soft",isSeamless:!1,attackSeconds:.025,releases:!1,releaseTicks:3,slides:!1,slideTicks:3},{name:"slide",isSeamless:!0,attackSeconds:.025,releases:!1,releaseTicks:3,slides:!0,slideTicks:3},{name:"cross fade",isSeamless:!1,attackSeconds:.04,releases:!0,releaseTicks:6,slides:!1,slideTicks:3},{name:"hard fade",isSeamless:!1,attackSeconds:0,releases:!0,releaseTicks:48,slides:!1,slideTicks:3},{name:"medium fade",isSeamless:!1,attackSeconds:.0125,releases:!0,releaseTicks:72,slides:!1,slideTicks:3},{name:"soft fade",isSeamless:!1,attackSeconds:.06,releases:!0,releaseTicks:96,slides:!1,slideTicks:6}]),s.vibratos=n([{name:"none",amplitude:0,periodsSeconds:[.14],delayParts:0},{name:"light",amplitude:.15,periodsSeconds:[.14],delayParts:0},{name:"delayed",amplitude:.3,periodsSeconds:[.14],delayParts:18},{name:"heavy",amplitude:.45,periodsSeconds:[.14],delayParts:0},{name:"shaky",amplitude:.1,periodsSeconds:[.11,.17798,.33],delayParts:0}]),s.intervals=n([{name:"union",spread:0,offset:0,volume:.7,sign:1},{name:"shimmer",spread:.018,offset:0,volume:.8,sign:1},{name:"hum",spread:.045,offset:0,volume:1,sign:1},{name:"honky tonk",spread:.09,offset:0,volume:1,sign:1},{name:"dissonant",spread:.25,offset:0,volume:.9,sign:1},{name:"fifth",spread:3.5,offset:3.5,volume:.9,sign:1},{name:"octave",spread:6,offset:6,volume:.8,sign:1},{name:"bowed",spread:.02,offset:0,volume:1,sign:-1},{name:"piano",spread:.01,offset:0,volume:1,sign:.7}]),s.effectsNames=["none","reverb","chorus","chorus & reverb"],s.volumeRange=8,s.volumeLogScale=-.5,s.panCenter=4,s.panMax=2*s.panCenter,s.chords=n([{name:"harmony",harmonizes:!0,customInterval:!1,arpeggiates:!1,isCustomInterval:!1,strumParts:0},{name:"strum",harmonizes:!0,customInterval:!1,arpeggiates:!1,isCustomInterval:!1,strumParts:1},{name:"arpeggio",harmonizes:!1,customInterval:!1,arpeggiates:!0,isCustomInterval:!1,strumParts:0},{name:"custom interval",harmonizes:!0,customInterval:!0,arpeggiates:!0,isCustomInterval:!0,strumParts:0}]),s.maxChordSize=4,s.operatorCount=4,s.algorithms=n([{name:"1←(2 3 4)",carrierCount:1,associatedCarrier:[1,1,1,1],modulatedBy:[[2,3,4],[],[],[]]},{name:"1←(2 3←4)",carrierCount:1,associatedCarrier:[1,1,1,1],modulatedBy:[[2,3],[],[4],[]]},{name:"1←2←(3 4)",carrierCount:1,associatedCarrier:[1,1,1,1],modulatedBy:[[2],[3,4],[],[]]},{name:"1←(2 3)←4",carrierCount:1,associatedCarrier:[1,1,1,1],modulatedBy:[[2,3],[4],[4],[]]},{name:"1←2←3←4",carrierCount:1,associatedCarrier:[1,1,1,1],modulatedBy:[[2],[3],[4],[]]},{name:"1←3 2←4",carrierCount:2,associatedCarrier:[1,2,1,2],modulatedBy:[[3],[4],[],[]]},{name:"1 2←(3 4)",carrierCount:2,associatedCarrier:[1,2,2,2],modulatedBy:[[],[3,4],[],[]]},{name:"1 2←3←4",carrierCount:2,associatedCarrier:[1,2,2,2],modulatedBy:[[],[3],[4],[]]},{name:"(1 2)←3←4",carrierCount:2,associatedCarrier:[1,2,2,2],modulatedBy:[[3],[3],[4],[]]},{name:"(1 2)←(3 4)",carrierCount:2,associatedCarrier:[1,2,2,2],modulatedBy:[[3,4],[3,4],[],[]]},{name:"1 2 3←4",carrierCount:3,associatedCarrier:[1,2,3,3],modulatedBy:[[],[],[4],[]]},{name:"(1 2 3)←4",carrierCount:3,associatedCarrier:[1,2,3,3],modulatedBy:[[4],[4],[4],[]]},{name:"1 2 3 4",carrierCount:4,associatedCarrier:[1,2,3,4],modulatedBy:[[],[],[],[]]}]),s.operatorCarrierInterval=[0,.04,-.073,.091],s.operatorAmplitudeMax=15,s.operatorFrequencies=n([{name:"1×",mult:1,hzOffset:0,amplitudeSign:1},{name:"~1×",mult:1,hzOffset:1.5,amplitudeSign:-1},{name:"2×",mult:2,hzOffset:0,amplitudeSign:1},{name:"~2×",mult:2,hzOffset:-1.3,amplitudeSign:-1},{name:"3×",mult:3,hzOffset:0,amplitudeSign:1},{name:"4×",mult:4,hzOffset:0,amplitudeSign:1},{name:"5×",mult:5,hzOffset:0,amplitudeSign:1},{name:"6×",mult:6,hzOffset:0,amplitudeSign:1},{name:"7×",mult:7,hzOffset:0,amplitudeSign:1},{name:"8×",mult:8,hzOffset:0,amplitudeSign:1},{name:"9×",mult:9,hzOffset:0,amplitudeSign:1},{name:"11×",mult:11,hzOffset:0,amplitudeSign:1},{name:"13×",mult:13,hzOffset:0,amplitudeSign:1},{name:"16×",mult:16,hzOffset:0,amplitudeSign:1},{name:"20×",mult:20,hzOffset:0,amplitudeSign:1}]),s.envelopes=n([{name:"custom",type:0,speed:0},{name:"steady",type:1,speed:0},{name:"punch",type:2,speed:0},{name:"flare 1",type:3,speed:32},{name:"flare 2",type:3,speed:8},{name:"flare 3",type:3,speed:2},{name:"twang 1",type:4,speed:32},{name:"twang 2",type:4,speed:8},{name:"twang 3",type:4,speed:2},{name:"swell 1",type:5,speed:32},{name:"swell 2",type:5,speed:8},{name:"swell 3",type:5,speed:2},{name:"tremolo1",type:6,speed:4},{name:"tremolo2",type:6,speed:2},{name:"tremolo3",type:6,speed:1},{name:"tremolo4",type:7,speed:4},{name:"tremolo5",type:7,speed:2},{name:"tremolo6",type:7,speed:1},{name:"decay 1",type:8,speed:10},{name:"decay 2",type:8,speed:7},{name:"decay 3",type:8,speed:4}]),s.feedbacks=n([{name:"1⟲",indices:[[1],[],[],[]]},{name:"2⟲",indices:[[],[2],[],[]]},{name:"3⟲",indices:[[],[],[3],[]]},{name:"4⟲",indices:[[],[],[],[4]]},{name:"1⟲ 2⟲",indices:[[1],[2],[],[]]},{name:"3⟲ 4⟲",indices:[[],[],[3],[4]]},{name:"1⟲ 2⟲ 3⟲",indices:[[1],[2],[3],[]]},{name:"2⟲ 3⟲ 4⟲",indices:[[],[2],[3],[4]]},{name:"1⟲ 2⟲ 3⟲ 4⟲",indices:[[1],[2],[3],[4]]},{name:"1→2",indices:[[],[1],[],[]]},{name:"1→3",indices:[[],[],[1],[]]},{name:"1→4",indices:[[],[],[],[1]]},{name:"2→3",indices:[[],[],[2],[]]},{name:"2→4",indices:[[],[],[],[2]]},{name:"3→4",indices:[[],[],[],[3]]},{name:"1→3 2→4",indices:[[],[],[1],[2]]},{name:"1→4 2→3",indices:[[],[],[2],[1]]},{name:"1→2→3→4",indices:[[],[1],[2],[3]]}]),s.chipNoiseLength=32768,s.spectrumBasePitch=24,s.spectrumControlPoints=30,s.spectrumControlPointsPerOctave=7,s.spectrumControlPointBits=3,s.spectrumMax=(1<<s.spectrumControlPointBits)-1,s.harmonicsControlPoints=28,s.harmonicsRendered=64,s.harmonicsControlPointBits=3,s.harmonicsMax=(1<<s.harmonicsControlPointBits)-1,s.harmonicsWavelength=2048,s.pulseWidthRange=8,s.pitchChannelCountMin=1,s.pitchChannelCountMax=6,s.noiseChannelCountMin=0,s.noiseChannelCountMax=3,s.noiseInterval=6,s.pitchesPerOctave=12,s.drumCount=12,s.pitchOctaves=7,s.windowOctaves=3,s.scrollableOctaves=s.pitchOctaves-s.windowOctaves,s.windowPitchCount=s.windowOctaves*s.pitchesPerOctave+1,s.maxPitch=s.pitchOctaves*s.pitchesPerOctave,s.maximumTonesPerChannel=2*s.maxChordSize,s.sineWaveLength=256,s.sineWaveMask=s.sineWaveLength-1,s.sineWave=function(){const t=new Float64Array(s.sineWaveLength+1);for(let e=0;e<s.sineWaveLength+1;e++)t[e]=Math.sin(e*Math.PI*2/s.sineWaveLength);return t}(),t.Config=s,t.getDrumWave=i,t.drawNoiseSpectrum=h,t.getArpeggioPitchIndex=function(t,e,i){const h=s.rhythms[e].arpeggioPatterns[t-1];return null!=h?h[i%h.length]:i%t},t.toNameMap=n}(beepbox||(beepbox={})),function(t){function s(t){if(!function(t){return!(!t||t&t-1)}(t))throw new Error("FFT array length must be a power of 2.");return Math.round(Math.log(t)/Math.log(2))}t.scaleElementsByFactor=function(t,s){for(let e=0;e<t.length;e++)t[e]*=s},t.inverseRealFourierTransform=function(t,e){const i=s(e);if(e<4)throw new Error("FFT array length must be at least 4.");for(let s=i-1;s>=2;s--){const i=1<<s,h=i>>1,n=i<<1,o=2*Math.PI/n,r=Math.cos(o),a=Math.sin(o),l=2*r;for(let s=0;s<e;s+=n){const e=s,n=e+h,o=e+i,c=o+h,f=o+i,u=t[e],m=t[o];t[e]=u+m,t[n]*=2,t[o]=u-m,t[c]*=2;let d=r,p=-a,M=1,v=0;for(let s=1;s<h;s++){const i=e+s,h=o-s,n=o+s,r=f-s,a=t[i],c=t[h],u=t[n],m=t[r],g=a-c,b=u+m;t[i]=a+c,t[h]=m-u,t[n]=g*d-b*p,t[r]=b*d+g*p;const w=l*d-M,y=l*p-v;M=d,v=p,d=w,p=y}}}for(let s=0;s<e;s+=4){const e=s+1,i=s+2,h=s+3,n=t[s],o=2*t[e],r=t[i],a=2*t[h],l=n+r,c=n-r;t[s]=l+o,t[e]=l-o,t[i]=c+a,t[h]=c-a}!function(t,e){const i=s(e);if(i>16)throw new Error("FFT array length must not be greater than 2^16.");const h=16-i;for(let s=0;s<e;s++){let e;if((e=((e=(61680&(e=(52428&(e=(43690&s)>>1|(21845&s)<<1))>>2|(13107&e)<<2))>>4|(3855&e)<<4)>>8|(255&e)<<8)>>h)>s){let i=t[s];t[s]=t[e],t[e]=i}}}(t,e)}}(beepbox||(beepbox={})),function(t){t.Deque=class{constructor(){this.t=1,this.s=[void 0],this.i=0,this.h=0,this.o=0}pushFront(t){this.o>=this.t&&this.l(),this.h=this.h-1&this.i,this.s[this.h]=t,this.o++}pushBack(t){this.o>=this.t&&this.l(),this.s[this.h+this.o&this.i]=t,this.o++}popFront(){if(this.o<=0)throw new Error("No elements left to pop.");const t=this.s[this.h];return this.s[this.h]=void 0,this.h=this.h+1&this.i,this.o--,t}popBack(){if(this.o<=0)throw new Error("No elements left to pop.");this.o--;const t=this.h+this.o&this.i,s=this.s[t];return this.s[t]=void 0,s}peakFront(){if(this.o<=0)throw new Error("No elements left to pop.");return this.s[this.h]}peakBack(){if(this.o<=0)throw new Error("No elements left to pop.");return this.s[this.h+this.o-1&this.i]}count(){return this.o}set(t,s){if(t<0||t>=this.o)throw new Error("Invalid index");this.s[this.h+t&this.i]=s}get(t){if(t<0||t>=this.o)throw new Error("Invalid index");return this.s[this.h+t&this.i]}remove(t){if(t<0||t>=this.o)throw new Error("Invalid index");if(t<=this.o>>1){for(;t>0;)this.set(t,this.get(t-1)),t--;this.popFront()}else{for(t++;t<this.o;)this.set(t-1,this.get(t)),t++;this.popBack()}}l(){if(this.t>=1073741824)throw new Error("Capacity too big.");this.t=this.t<<1;const t=this.s,s=new Array(this.t),e=0|this.o,i=0|this.h;for(let h=0;h<e;h++)s[h]=t[i+h&this.i];for(let t=e;t<this.t;t++)s[t]=void 0;this.h=0,this.s=s,this.i=this.t-1}}}(beepbox||(beepbox={})),function(t){const s=[48,49,50,51,52,53,54,55,56,57,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,45,95],e=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,62,62,0,0,1,2,3,4,5,6,7,8,9,0,0,0,0,0,0,0,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,0,0,0,0,63,0,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,0,0,0,0,0];class i{constructor(t,s,i){this.u=[],this.m=0;for(let h=s;h<i;h++){const s=e[t.charCodeAt(h)];this.u.push(s>>5&1),this.u.push(s>>4&1),this.u.push(s>>3&1),this.u.push(s>>2&1),this.u.push(s>>1&1),this.u.push(1&s)}}read(t){let s=0;for(;t>0;)s<<=1,s+=this.u[this.m++],t--;return s}readLongTail(t,s){let e=t,i=s;for(;this.u[this.m++];)e+=1<<i,i++;for(;i>0;)i--,this.u[this.m++]&&(e+=1<<i);return e}readPartDuration(){return this.readLongTail(1,3)}readLegacyPartDuration(){return this.readLongTail(1,2)}readPinCount(){return this.readLongTail(1,0)}readPitchInterval(){return this.read(1)?-this.readLongTail(1,3):this.readLongTail(1,3)}}class h{constructor(){this.p=0,this.u=[]}clear(){this.p=0}write(t,s){for(t--;t>=0;)this.u[this.p++]=s>>>t&1,t--}writeLongTail(t,s,e){if(e<t)throw new Error("value out of bounds");e-=t;let i=s;for(;e>=1<<i;)this.u[this.p++]=1,e-=1<<i,i++;for(this.u[this.p++]=0;i>0;)i--,this.u[this.p++]=e>>>i&1}writePartDuration(t){this.writeLongTail(1,3,t)}writePinCount(t){this.writeLongTail(1,0,t)}writePitchInterval(t){t<0?(this.write(1,1),this.writeLongTail(1,3,-t)):(this.write(1,0),this.writeLongTail(1,3,t))}concat(t){for(let s=0;s<t.p;s++)this.u[this.p++]=t.u[s]}encodeBase64(t){for(let e=0;e<this.p;e+=6){const i=this.u[e]<<5|this.u[e+1]<<4|this.u[e+2]<<3|this.u[e+3]<<2|this.u[e+4]<<1|this.u[e+5];t.push(s[i])}return t}lengthBase64(){return Math.ceil(this.p/6)}}function n(t,s,e){return{interval:t,time:s,volume:e}}function o(t,s,e){return e<=(s-=1)?e>=t?e:t:s}function r(t,s,e){if(t<=e&&e<=s)return e;throw new Error(`Value ${e} not in range [${t}, ${s}]`)}t.makeNotePin=n;class a{constructor(t,s,e,i,h=!1){this.pitches=[t],this.pins=[n(0,0,i),n(0,e-s,h?0:i)],this.start=s,this.end=e}pickMainInterval(){let t=0,s=0;for(let e=1;e<this.pins.length;e++){const i=this.pins[e-1],h=this.pins[e];if(i.interval==h.interval){const e=h.time-i.time;t<e&&(t=e,s=i.interval)}}if(0==t){let t=0;for(let e=0;e<this.pins.length;e++){const i=this.pins[e];t<i.volume&&(t=i.volume,s=i.interval)}}return s}}t.Note=a;class l{constructor(){this.notes=[],this.instrument=0}cloneNotes(){const t=[];for(const s of this.notes){const e=new a(-1,s.start,s.end,3);e.pitches=s.pitches.concat(),e.pins=[];for(const t of s.pins)e.pins.push(n(t.interval,t.time,t.volume));t.push(e)}return t}reset(){this.notes.length=0,this.instrument=0}}t.Pattern=l;class c{constructor(t){this.frequency=0,this.amplitude=0,this.envelope=0,this.reset(t)}reset(s){this.frequency=0,this.amplitude=s<=1?t.Config.operatorAmplitudeMax:0,this.envelope=0==s?0:1}}t.Operator=c;class f{constructor(t){this.spectrum=[],this.M=null,this.v=!1,this.reset(t)}reset(s){for(let e=0;e<t.Config.spectrumControlPoints;e++)if(s)this.spectrum[e]=Math.round(t.Config.spectrumMax*(1/Math.sqrt(1+e/3)));else{const s=0==e||7==e||11==e||14==e||16==e||18==e||21==e||23==e||e>=25;this.spectrum[e]=s?Math.max(0,Math.round(t.Config.spectrumMax*(1-e/30))):0}this.v=!1}markCustomWaveDirty(){this.v=!1}getCustomWave(s){if(!this.v||null==this.M){let i=t.Config.chipNoiseLength;null!=this.M&&this.M.length==i+1||(this.M=new Float32Array(i+1));const h=this.M;for(let t=0;t<i;t++)h[t]=0;const n=14,o=.25,r=[0,1/7,Math.log(5/4)/Math.LN2,3/7,Math.log(1.5)/Math.LN2,5/7,6/7];function e(e){return s+Math.floor(e/t.Config.spectrumControlPointsPerOctave)+r[(e+t.Config.spectrumControlPointsPerOctave)%t.Config.spectrumControlPointsPerOctave]}let a=1;for(let s=0;s<t.Config.spectrumControlPoints+1;s++){const i=s<=0?0:this.spectrum[s-1],r=s>=t.Config.spectrumControlPoints?this.spectrum[t.Config.spectrumControlPoints-1]:this.spectrum[s],l=e(s-1);let c=e(s);s>=t.Config.spectrumControlPoints&&(c=n+(c-n)*o),0==i&&0==r||(a+=.02*t.drawNoiseSpectrum(h,l,c,i/t.Config.spectrumMax,r/t.Config.spectrumMax,-.5))}this.spectrum[t.Config.spectrumControlPoints-1]>0&&(a+=.02*t.drawNoiseSpectrum(h,n+(e(t.Config.spectrumControlPoints)-n)*o,n,this.spectrum[t.Config.spectrumControlPoints-1]/t.Config.spectrumMax,0,-.5)),t.inverseRealFourierTransform(h,i),t.scaleElementsByFactor(h,5/(Math.sqrt(i)*Math.pow(a,.75))),h[i]=h[0],this.v=!0}return this.M}}t.SpectrumWave=f;class u{constructor(){this.harmonics=[],this.M=null,this.v=!1,this.reset()}reset(){for(let s=0;s<t.Config.harmonicsControlPoints;s++)this.harmonics[s]=0;this.harmonics[0]=t.Config.harmonicsMax,this.harmonics[3]=t.Config.harmonicsMax,this.harmonics[6]=t.Config.harmonicsMax,this.v=!1}markCustomWaveDirty(){this.v=!1}getCustomWave(){if(!this.v||null==this.M){let s=t.Config.harmonicsWavelength;const e=t.getDrumWave(0);null!=this.M&&this.M.length==s+1||(this.M=new Float32Array(s+1));const i=this.M;for(let t=0;t<s;t++)i[t]=0;const h=-.25;let n=1;for(let o=0;o<t.Config.harmonicsRendered;o++){const r=o+1;let a=o<t.Config.harmonicsControlPoints?this.harmonics[o]:this.harmonics[t.Config.harmonicsControlPoints-1];o>=t.Config.harmonicsControlPoints&&(a*=1-(o-t.Config.harmonicsControlPoints)/(t.Config.harmonicsRendered-t.Config.harmonicsControlPoints));const l=a/t.Config.harmonicsMax;let c=Math.pow(2,a-t.Config.harmonicsMax+1)*Math.sqrt(l);o<t.Config.harmonicsControlPoints&&(n+=c),c*=Math.pow(r,h),c*=e[o+589],i[s-r]=c}t.inverseRealFourierTransform(i,s);const o=1/Math.pow(n,.7);let r=0,a=0;for(let t=0;t<i.length;t++)r+=a,a=i[t]*o,i[t]=r;i[s]=i[0],this.v=!0}return this.M}}t.HarmonicsWave=u;class m{constructor(s){this.type=0,this.preset=0,this.chipWave=2,this.chipNoise=1,this.filterCutoff=6,this.filterResonance=0,this.filterEnvelope=1,this.transition=1,this.vibrato=0,this.interval=0,this.effects=0,this.chord=1,this.volume=0,this.pan=t.Config.panCenter,this.pulseWidth=t.Config.pulseWidthRange-1,this.pulseEnvelope=1,this.algorithm=0,this.feedbackType=0,this.feedbackAmplitude=0,this.feedbackEnvelope=1,this.operators=[],this.harmonicsWave=new u,this.drumsetEnvelopes=[],this.drumsetSpectrumWaves=[],this.spectrumWave=new f(s);for(let s=0;s<t.Config.operatorCount;s++)this.operators[s]=new c(s);for(let s=0;s<t.Config.drumCount;s++)this.drumsetEnvelopes[s]=t.Config.envelopes.dictionary["twang 2"].index,this.drumsetSpectrumWaves[s]=new f(!0)}setTypeAndReset(s,e){switch(this.type=s,this.preset=s,this.volume=0,this.pan=t.Config.panCenter,s){case 0:this.chipWave=2,this.filterCutoff=6,this.filterResonance=0,this.filterEnvelope=t.Config.envelopes.dictionary.steady.index,this.transition=1,this.vibrato=0,this.interval=0,this.effects=1,this.chord=2;break;case 1:this.transition=1,this.vibrato=0,this.effects=1,this.chord=3,this.filterCutoff=10,this.filterResonance=0,this.filterEnvelope=1,this.algorithm=0,this.feedbackType=0,this.feedbackAmplitude=0,this.feedbackEnvelope=t.Config.envelopes.dictionary.steady.index;for(let t=0;t<this.operators.length;t++)this.operators[t].reset(t);break;case 2:this.chipNoise=1,this.transition=1,this.effects=0,this.chord=2,this.filterCutoff=10,this.filterResonance=0,this.filterEnvelope=t.Config.envelopes.dictionary.steady.index;break;case 3:this.transition=1,this.effects=1,this.chord=0,this.filterCutoff=10,this.filterResonance=0,this.filterEnvelope=t.Config.envelopes.dictionary.steady.index,this.spectrumWave.reset(e);break;case 4:this.effects=0;for(let s=0;s<t.Config.drumCount;s++)this.drumsetEnvelopes[s]=t.Config.envelopes.dictionary["twang 2"].index,this.drumsetSpectrumWaves[s].reset(e);break;case 5:this.filterCutoff=10,this.filterResonance=0,this.filterEnvelope=t.Config.envelopes.dictionary.steady.index,this.transition=1,this.vibrato=0,this.interval=0,this.effects=1,this.chord=0,this.harmonicsWave.reset();break;case 6:this.filterCutoff=10,this.filterResonance=0,this.filterEnvelope=t.Config.envelopes.dictionary.steady.index,this.transition=1,this.vibrato=0,this.interval=0,this.effects=1,this.chord=2,this.pulseWidth=t.Config.pulseWidthRange-1,this.pulseEnvelope=t.Config.envelopes.dictionary["twang 2"].index;break;default:throw new Error("Unrecognized instrument type: "+s)}}toJsonObject(){const s={type:t.Config.instrumentTypeNames[this.type],volume:20*(5-this.volume),pan:100*(this.pan-t.Config.panCenter)/t.Config.panCenter,effects:t.Config.effectsNames[this.effects]};if(this.preset!=this.type&&(s.preset=this.preset),4!=this.type&&(s.transition=t.Config.transitions[this.transition].name,s.chord=this.getChord().name,s.filterCutoffHz=Math.round(t.Config.filterCutoffMaxHz*Math.pow(2,this.getFilterCutoffOctaves())),s.filterResonance=Math.round(100*this.filterResonance/(t.Config.filterResonanceRange-1)),s.filterEnvelope=this.getFilterEnvelope().name),2==this.type)s.wave=t.Config.chipNoises[this.chipNoise].name;else if(3==this.type){s.spectrum=[];for(let e=0;e<t.Config.spectrumControlPoints;e++)s.spectrum[e]=Math.round(100*this.spectrumWave.spectrum[e]/t.Config.spectrumMax)}else if(4==this.type){s.drums=[];for(let e=0;e<t.Config.drumCount;e++){const i=[];for(let s=0;s<t.Config.spectrumControlPoints;s++)i[s]=Math.round(100*this.drumsetSpectrumWaves[e].spectrum[s]/t.Config.spectrumMax);s.drums[e]={filterEnvelope:this.getDrumsetEnvelope(e).name,spectrum:i}}}else if(0==this.type)s.wave=t.Config.chipWaves[this.chipWave].name,s.interval=t.Config.intervals[this.interval].name,s.vibrato=t.Config.vibratos[this.vibrato].name;else if(6==this.type)s.pulseWidth=Math.round(50*Math.pow(.5,.5*(t.Config.pulseWidthRange-this.pulseWidth-1))*32)/32,s.pulseEnvelope=t.Config.envelopes[this.pulseEnvelope].name,s.vibrato=t.Config.vibratos[this.vibrato].name;else if(5==this.type){s.interval=t.Config.intervals[this.interval].name,s.vibrato=t.Config.vibratos[this.vibrato].name,s.harmonics=[];for(let e=0;e<t.Config.harmonicsControlPoints;e++)s.harmonics[e]=Math.round(100*this.harmonicsWave.harmonics[e]/t.Config.harmonicsMax)}else{if(1!=this.type)throw new Error("Unrecognized instrument type");{const e=[];for(const s of this.operators)e.push({frequency:t.Config.operatorFrequencies[s.frequency].name,amplitude:s.amplitude,envelope:t.Config.envelopes[s.envelope].name});s.vibrato=t.Config.vibratos[this.vibrato].name,s.algorithm=t.Config.algorithms[this.algorithm].name,s.feedbackType=t.Config.feedbacks[this.feedbackType].name,s.feedbackAmplitude=this.feedbackAmplitude,s.feedbackEnvelope=t.Config.envelopes[this.feedbackEnvelope].name,s.operators=e}}return s}fromJsonObject(s,e){void 0==s&&(s={});let i=t.Config.instrumentTypeNames.indexOf(s.type);-1==i&&(i=e?2:0),this.setTypeAndReset(i,e),void 0!=s.preset&&(this.preset=s.preset>>>0),void 0!=s.volume?this.volume=o(0,t.Config.volumeRange,Math.round(5-(0|s.volume)/20)):this.volume=0,void 0!=s.pan?this.pan=o(0,t.Config.panMax+1,Math.round(t.Config.panCenter+(0|s.pan)*t.Config.panCenter/100)):this.pan=t.Config.panCenter;const h={binary:0,sudden:1,smooth:2},n=s.transition||s.envelope;if(this.transition=void 0!=h[n]?h[n]:t.Config.transitions.findIndex(t=>t.name==n),-1==this.transition&&(this.transition=1),this.effects=t.Config.effectsNames.indexOf(s.effects),-1==this.effects&&(this.effects=2==this.type?0:1),void 0!=s.filterCutoffHz?this.filterCutoff=o(0,t.Config.filterCutoffRange,Math.round(t.Config.filterCutoffRange-1+2*Math.log((0|s.filterCutoffHz)/t.Config.filterCutoffMaxHz)/Math.LN2)):this.filterCutoff=0==this.type?6:10,void 0!=s.filterResonance?this.filterResonance=o(0,t.Config.filterResonanceRange,Math.round((t.Config.filterResonanceRange-1)*(0|s.filterResonance)/100)):this.filterResonance=0,this.filterEnvelope=t.Config.envelopes.findIndex(t=>t.name==s.filterEnvelope),-1==this.filterEnvelope&&(this.filterEnvelope=t.Config.envelopes.dictionary.steady.index),void 0!=s.filter){const t=[10,6,3,0,8,5,2],e=[1,1,1,1,18,19,20],i=["none","bright","medium","soft","decay bright","decay medium","decay soft"],h={"sustain sharp":1,"sustain medium":2,"sustain soft":3,"decay sharp":4};let n=void 0!=h[s.filter]?h[s.filter]:i.indexOf(s.filter);-1==n&&(n=0),this.filterCutoff=t[n],this.filterEnvelope=e[n],this.filterResonance=0}const r=["none","vibrato light","vibrato delayed","vibrato heavy"];if(2==this.type)this.chipNoise=t.Config.chipNoises.findIndex(t=>t.name==s.wave),-1==this.chipNoise&&(this.chipNoise=1),this.chord=t.Config.chords.findIndex(t=>t.name==s.chord),-1==this.chord&&(this.chord=2);else if(3==this.type){if(void 0!=s.spectrum)for(let e=0;e<t.Config.spectrumControlPoints;e++)this.spectrumWave.spectrum[e]=Math.max(0,Math.min(t.Config.spectrumMax,Math.round(t.Config.spectrumMax*+s.spectrum[e]/100)));this.chord=t.Config.chords.findIndex(t=>t.name==s.chord),-1==this.chord&&(this.chord=0)}else if(4==this.type){if(void 0!=s.drums)for(let e=0;e<t.Config.drumCount;e++){const i=s.drums[e];if(void 0!=i&&(void 0!=i.filterEnvelope&&(this.drumsetEnvelopes[e]=t.Config.envelopes.findIndex(t=>t.name==i.filterEnvelope),-1==this.drumsetEnvelopes[e]&&(this.drumsetEnvelopes[e]=t.Config.envelopes.dictionary["twang 2"].index)),void 0!=i.spectrum))for(let s=0;s<t.Config.spectrumControlPoints;s++)this.drumsetSpectrumWaves[e].spectrum[s]=Math.max(0,Math.min(t.Config.spectrumMax,Math.round(t.Config.spectrumMax*+i.spectrum[s]/100)))}}else if(5==this.type){if(void 0!=s.harmonics)for(let e=0;e<t.Config.harmonicsControlPoints;e++)this.harmonicsWave.harmonics[e]=Math.max(0,Math.min(t.Config.harmonicsMax,Math.round(t.Config.harmonicsMax*+s.harmonics[e]/100)));void 0!=s.interval&&(this.interval=t.Config.intervals.findIndex(t=>t.name==s.interval),-1==this.interval&&(this.interval=0)),void 0!=s.vibrato&&(this.vibrato=t.Config.vibratos.findIndex(t=>t.name==s.vibrato),-1==this.vibrato&&(this.vibrato=0)),this.chord=t.Config.chords.findIndex(t=>t.name==s.chord),-1==this.chord&&(this.chord=0)}else if(6==this.type)void 0!=s.pulseWidth?this.pulseWidth=o(0,t.Config.pulseWidthRange,Math.round(Math.log(+s.pulseWidth/50)/Math.LN2/.5-1+8)):this.pulseWidth=t.Config.pulseWidthRange-1,void 0!=s.pulseEnvelope&&(this.pulseEnvelope=t.Config.envelopes.findIndex(t=>t.name==s.pulseEnvelope),-1==this.pulseEnvelope&&(this.pulseEnvelope=t.Config.envelopes.dictionary.steady.index)),void 0!=s.vibrato&&(this.vibrato=t.Config.vibratos.findIndex(t=>t.name==s.vibrato),-1==this.vibrato&&(this.vibrato=0)),this.chord=t.Config.chords.findIndex(t=>t.name==s.chord),-1==this.chord&&(this.chord=0);else if(0==this.type){const e={triangle:1,square:2,"pulse wide":3,"pulse narrow":4,sawtooth:5,"double saw":6,"double pulse":7,spiky:8,plateau:0};if(this.chipWave=void 0!=e[s.wave]?e[s.wave]:t.Config.chipWaves.findIndex(t=>t.name==s.wave),-1==this.chipWave&&(this.chipWave=1),void 0!=s.interval)this.interval=t.Config.intervals.findIndex(t=>t.name==s.interval),-1==this.interval&&(this.interval=0);else if(void 0!=s.chorus){const e={fifths:5,octaves:6};this.interval=void 0!=e[s.chorus]?e[s.chorus]:t.Config.intervals.findIndex(t=>t.name==s.chorus),-1==this.interval&&(this.interval=0)}void 0!=s.vibrato?(this.vibrato=t.Config.vibratos.findIndex(t=>t.name==s.vibrato),-1==this.vibrato&&(this.vibrato=0)):void 0!=s.effect&&(this.vibrato=r.indexOf(s.effect),-1==this.vibrato&&(this.vibrato=0)),this.chord=t.Config.chords.findIndex(t=>t.name==s.chord),-1==this.chord&&(this.chord=2),"custom harmony"==s.chorus&&(this.interval=2,this.chord=3)}else{if(1!=this.type)throw new Error("Unrecognized instrument type.");{void 0!=s.vibrato?(this.vibrato=t.Config.vibratos.findIndex(t=>t.name==s.vibrato),-1==this.vibrato&&(this.vibrato=0)):void 0!=s.effect&&(this.vibrato=r.indexOf(s.effect),-1==this.vibrato&&(this.vibrato=0)),this.chord=t.Config.chords.findIndex(t=>t.name==s.chord),-1==this.chord&&(this.chord=3),this.algorithm=t.Config.algorithms.findIndex(t=>t.name==s.algorithm),-1==this.algorithm&&(this.algorithm=0),this.feedbackType=t.Config.feedbacks.findIndex(t=>t.name==s.feedbackType),-1==this.feedbackType&&(this.feedbackType=0),void 0!=s.feedbackAmplitude?this.feedbackAmplitude=o(0,t.Config.operatorAmplitudeMax+1,0|s.feedbackAmplitude):this.feedbackAmplitude=0;const e={"pluck 1":6,"pluck 2":7,"pluck 3":8};this.feedbackEnvelope=void 0!=e[s.feedbackEnvelope]?e[s.feedbackEnvelope]:t.Config.envelopes.findIndex(t=>t.name==s.feedbackEnvelope),-1==this.feedbackEnvelope&&(this.feedbackEnvelope=0);for(let i=0;i<t.Config.operatorCount;i++){const h=this.operators[i];let n=void 0;s.operators&&(n=s.operators[i]),void 0==n&&(n={}),h.frequency=t.Config.operatorFrequencies.findIndex(t=>t.name==n.frequency),-1==h.frequency&&(h.frequency=0),void 0!=n.amplitude?h.amplitude=o(0,t.Config.operatorAmplitudeMax+1,0|n.amplitude):h.amplitude=0,h.envelope=void 0!=e[n.envelope]?e[n.envelope]:t.Config.envelopes.findIndex(t=>t.name==n.envelope),-1==h.envelope&&(h.envelope=0)}}}}static frequencyFromPitch(t){return 440*Math.pow(2,(t-69)/12)}static drumsetIndexReferenceDelta(s){return m.frequencyFromPitch(t.Config.spectrumBasePitch+6*s)/44100}static g(t){return 15+Math.log(m.drumsetIndexReferenceDelta(t))/Math.LN2}warmUp(){if(2==this.type)t.getDrumWave(this.chipNoise);else if(5==this.type)this.harmonicsWave.getCustomWave();else if(3==this.type)this.spectrumWave.getCustomWave(8);else if(4==this.type)for(let s=0;s<t.Config.drumCount;s++)this.drumsetSpectrumWaves[s].getCustomWave(m.g(s))}getDrumWave(){if(2==this.type)return t.getDrumWave(this.chipNoise);if(3==this.type)return this.spectrumWave.getCustomWave(8);throw new Error("Unhandled instrument type in getDrumWave")}getDrumsetWave(t){if(4==this.type)return this.drumsetSpectrumWaves[t].getCustomWave(m.g(t));throw new Error("Unhandled instrument type in getDrumWave")}getTransition(){return 4==this.type?t.Config.transitions.dictionary["hard fade"]:t.Config.transitions[this.transition]}getChord(){return 4==this.type?t.Config.chords.dictionary.harmony:t.Config.chords[this.chord]}getFilterCutoffOctaves(){return 4==this.type?0:.5*(this.filterCutoff-(t.Config.filterCutoffRange-1))}getFilterIsFirstOrder(){return 4!=this.type&&0==this.filterResonance}getFilterResonance(){return 4==this.type?1:this.filterResonance}getFilterEnvelope(){if(4==this.type)throw new Error("Can't getFilterEnvelope() for drumset.");return t.Config.envelopes[this.filterEnvelope]}getDrumsetEnvelope(s){if(4!=this.type)throw new Error("Can't getDrumsetEnvelope() for non-drumset.");return t.Config.envelopes[this.drumsetEnvelopes[s]]}}t.Instrument=m;class d{constructor(){this.octave=0,this.instruments=[],this.patterns=[],this.bars=[],this.muted=!1}}t.Channel=d;class p{constructor(t){this.channels=[],void 0!=t?this.fromBase64String(t):this.initToDefault(!0)}getChannelCount(){return this.pitchChannelCount+this.noiseChannelCount}getChannelIsNoise(t){return t>=this.pitchChannelCount}initToDefault(t=!0){if(this.scale=0,this.key=0,this.loopStart=0,this.loopLength=4,this.tempo=150,this.reverb=0,this.beatsPerBar=8,this.barCount=16,this.patternsPerChannel=8,this.rhythm=1,this.instrumentsPerChannel=1,t){this.pitchChannelCount=3,this.noiseChannelCount=1;for(let t=0;t<this.getChannelCount();t++){this.channels.length<=t&&(this.channels[t]=new d);const s=this.channels[t];s.octave=3-t;for(let t=0;t<this.patternsPerChannel;t++)s.patterns.length<=t?s.patterns[t]=new l:s.patterns[t].reset();s.patterns.length=this.patternsPerChannel;const e=t>=this.pitchChannelCount;for(let t=0;t<this.instrumentsPerChannel;t++)s.instruments.length<=t&&(s.instruments[t]=new m(e)),s.instruments[t].setTypeAndReset(e?2:0,e);s.instruments.length=this.instrumentsPerChannel;for(let t=0;t<this.barCount;t++)s.bars[t]=t<4?1:0;s.bars.length=this.barCount}this.channels.length=this.getChannelCount()}}toBase64String(){let e,i=[];i.push(s[p.k]),i.push(110,s[this.pitchChannelCount],s[this.noiseChannelCount]),i.push(115,s[this.scale]),i.push(107,s[this.key]),i.push(108,s[this.loopStart>>6],s[63&this.loopStart]),i.push(101,s[this.loopLength-1>>6],s[this.loopLength-1&63]),i.push(116,s[this.tempo>>6],s[63&this.tempo]),i.push(109,s[this.reverb]),i.push(97,s[this.beatsPerBar-1]),i.push(103,s[this.barCount-1>>6],s[this.barCount-1&63]),i.push(106,s[this.patternsPerChannel-1>>6],s[this.patternsPerChannel-1&63]),i.push(105,s[this.instrumentsPerChannel-1]),i.push(114,s[this.rhythm]),i.push(111);for(let t=0;t<this.getChannelCount();t++)i.push(s[this.channels[t].octave]);for(let e=0;e<this.getChannelCount();e++)for(let n=0;n<this.instrumentsPerChannel;n++){const o=this.channels[e].instruments[n];if(i.push(84,s[o.type]),i.push(118,s[o.volume]),i.push(76,s[o.pan]),i.push(117,s[o.preset>>6],s[63&o.preset]),i.push(113,s[o.effects]),4!=o.type&&(i.push(100,s[o.transition]),i.push(102,s[o.filterCutoff]),i.push(121,s[o.filterResonance]),i.push(122,s[o.filterEnvelope]),i.push(67,s[o.chord])),0==o.type)i.push(119,s[o.chipWave]),i.push(99,s[o.vibrato]),i.push(104,s[o.interval]);else if(1==o.type){i.push(99,s[o.vibrato]),i.push(65,s[o.algorithm]),i.push(70,s[o.feedbackType]),i.push(66,s[o.feedbackAmplitude]),i.push(86,s[o.feedbackEnvelope]),i.push(81);for(let e=0;e<t.Config.operatorCount;e++)i.push(s[o.operators[e].frequency]);i.push(80);for(let e=0;e<t.Config.operatorCount;e++)i.push(s[o.operators[e].amplitude]);i.push(69);for(let e=0;e<t.Config.operatorCount;e++)i.push(s[o.operators[e].envelope])}else if(2==o.type)i.push(119,s[o.chipNoise]);else if(3==o.type){i.push(83);const s=new h;for(let e=0;e<t.Config.spectrumControlPoints;e++)s.write(t.Config.spectrumControlPointBits,o.spectrumWave.spectrum[e]);s.encodeBase64(i)}else if(4==o.type){i.push(122);for(let e=0;e<t.Config.drumCount;e++)i.push(s[o.drumsetEnvelopes[e]]);i.push(83);const e=new h;for(let s=0;s<t.Config.drumCount;s++)for(let i=0;i<t.Config.spectrumControlPoints;i++)e.write(t.Config.spectrumControlPointBits,o.drumsetSpectrumWaves[s].spectrum[i]);e.encodeBase64(i)}else if(5==o.type){i.push(99,s[o.vibrato]),i.push(104,s[o.interval]),i.push(72);const e=new h;for(let s=0;s<t.Config.harmonicsControlPoints;s++)e.write(t.Config.harmonicsControlPointBits,o.harmonicsWave.harmonics[s]);e.encodeBase64(i)}else{if(6!=o.type)throw new Error("Unknown instrument type.");i.push(99,s[o.vibrato]),i.push(87,s[o.pulseWidth],s[o.pulseEnvelope])}}i.push(98),e=new h;let n=0;for(;1<<n<this.patternsPerChannel+1;)n++;for(let t=0;t<this.getChannelCount();t++)for(let s=0;s<this.barCount;s++)e.write(n,this.channels[t].bars[s]);e.encodeBase64(i),i.push(112),e=new h;const o=new h;let r=0;for(;1<<r<this.instrumentsPerChannel;)r++;for(let s=0;s<this.getChannelCount();s++){const i=this.getChannelIsNoise(s),h=i?0:12*this.channels[s].octave;let n=(i?4:12)+h;const a=i?[4,6,7,2,3,8,0,10]:[12,19,24,31,36,7,0],l=[];for(let t=0;t<a.length;t++)a[t]+=h;for(const i of this.channels[s].patterns)if(e.write(r,i.instrument),i.notes.length>0){e.write(1,1);let s=0;for(const h of i.notes){h.start>s&&(e.write(2,0),e.writePartDuration(h.start-s)),o.clear();for(let t=1;t<h.pitches.length;t++)o.write(1,1);h.pitches.length<t.Config.maxChordSize&&o.write(1,0),o.writePinCount(h.pins.length-1),o.write(2,h.pins[0].volume);let i=0,r=h.pitches[0],c=r;const f=[];for(let t=1;t<h.pins.length;t++){const s=h.pins[t],e=r+s.interval;c!=e?(o.write(1,1),f.push(e),c=e):o.write(1,0),o.writePartDuration(s.time-i),i=s.time,o.write(2,s.volume)}const u=String.fromCharCode.apply(null,o.encodeBase64([])),m=l.indexOf(u);-1==m?(e.write(2,1),e.concat(o)):(e.write(1,1),e.writeLongTail(0,0,m),l.splice(m,1)),l.unshift(u),l.length>10&&l.pop();const d=h.pitches.concat(f);for(let t=0;t<d.length;t++){const s=d[t],i=a.indexOf(s);if(-1==i){let t=0,i=n;if(i<s)for(;i!=s;)i++,-1==a.indexOf(i)&&t++;else for(;i!=s;)i--,-1==a.indexOf(i)&&t--;e.write(1,0),e.writePitchInterval(t)}else e.write(1,1),e.write(3,i),a.splice(i,1);a.unshift(s),a.length>8&&a.pop(),n=t==h.pitches.length-1?h.pitches[0]:s}s=h.end}s<this.beatsPerBar*t.Config.partsPerBeat&&(e.write(2,0),e.writePartDuration(this.beatsPerBar*t.Config.partsPerBeat-s))}else e.write(1,0)}let a=e.lengthBase64(),l=[];for(;a>0;)l.unshift(s[63&a]),a>>=6;i.push(s[l.length]),Array.prototype.push.apply(i,l),e.encodeBase64(i);if(i.length<64e3)return String.fromCharCode.apply(null,i);{let t="";for(let s=0;s<i.length;s+=64e3)t+=String.fromCharCode.apply(null,i.slice(s,s+64e3));return t}}fromBase64String(s){if(null==s||""==s)return void this.initToDefault(!0);let h=0;for(;s.charCodeAt(h)<=32;)h++;if(35==s.charCodeAt(h)&&h++,123==s.charCodeAt(h))return void this.fromJsonObject(JSON.parse(0==h?s:s.substring(h)));const c=e[s.charCodeAt(h++)];if(-1==c||c>p.k||c<p.S)return;const f=c<3,u=c<4,M=c<5,v=c<6,g=c<7,b=c<8;if(this.initToDefault(v),f){for(const t of this.channels)t.instruments[0].transition=0;this.channels[3].instruments[0].chipNoise=0}let w,y=0,k=-1;for(;h<s.length;)switch(w=s.charCodeAt(h++)){case 110:this.pitchChannelCount=e[s.charCodeAt(h++)],this.noiseChannelCount=e[s.charCodeAt(h++)],this.pitchChannelCount=r(t.Config.pitchChannelCountMin,t.Config.pitchChannelCountMax,this.pitchChannelCount),this.noiseChannelCount=r(t.Config.noiseChannelCountMin,t.Config.noiseChannelCountMax,this.noiseChannelCount);for(let t=this.channels.length;t<this.getChannelCount();t++)this.channels[t]=new d;this.channels.length=this.getChannelCount();break;case 115:this.scale=e[s.charCodeAt(h++)],f&&10==this.scale&&(this.scale=11);break;case 107:this.key=o(0,t.Config.keys.length,g?11-e[s.charCodeAt(h++)]:e[s.charCodeAt(h++)]);break;case 108:this.loopStart=M?e[s.charCodeAt(h++)]:(e[s.charCodeAt(h++)]<<6)+e[s.charCodeAt(h++)];break;case 101:this.loopLength=M?e[s.charCodeAt(h++)]:(e[s.charCodeAt(h++)]<<6)+e[s.charCodeAt(h++)]+1;break;case 116:this.tempo=u?[95,120,151,190][e[s.charCodeAt(h++)]]:g?[88,95,103,111,120,130,140,151,163,176,190,206,222,240,259][e[s.charCodeAt(h++)]]:e[s.charCodeAt(h++)]<<6|e[s.charCodeAt(h++)],this.tempo=o(t.Config.tempoMin,t.Config.tempoMax+1,this.tempo);break;case 109:this.reverb=e[s.charCodeAt(h++)],this.reverb=o(0,t.Config.reverbRange,this.reverb);break;case 97:this.beatsPerBar=f?[6,7,8,9,10][e[s.charCodeAt(h++)]]:e[s.charCodeAt(h++)]+1,this.beatsPerBar=Math.max(t.Config.beatsPerBarMin,Math.min(t.Config.beatsPerBarMax,this.beatsPerBar));break;case 103:{const i=(e[s.charCodeAt(h++)]<<6)+e[s.charCodeAt(h++)]+1;this.barCount=r(t.Config.barCountMin,t.Config.barCountMax,i);for(let t=0;t<this.getChannelCount();t++){for(let s=this.channels[t].bars.length;s<this.barCount;s++)this.channels[t].bars[s]=1;this.channels[t].bars.length=this.barCount}}break;case 106:{let i;i=b?e[s.charCodeAt(h++)]+1:(e[s.charCodeAt(h++)]<<6)+e[s.charCodeAt(h++)]+1,this.patternsPerChannel=r(1,t.Config.barCountMax,i);for(let t=0;t<this.getChannelCount();t++){for(let s=this.channels[t].patterns.length;s<this.patternsPerChannel;s++)this.channels[t].patterns[s]=new l;this.channels[t].patterns.length=this.patternsPerChannel}}break;case 105:{const i=e[s.charCodeAt(h++)]+1;this.instrumentsPerChannel=r(t.Config.instrumentsPerChannelMin,t.Config.instrumentsPerChannelMax,i);for(let t=0;t<this.getChannelCount();t++){const s=t>=this.pitchChannelCount;for(let e=this.channels[t].instruments.length;e<this.instrumentsPerChannel;e++)this.channels[t].instruments[e]=new m(s);if(this.channels[t].instruments.length=this.instrumentsPerChannel,v)for(let e=0;e<this.instrumentsPerChannel;e++)this.channels[t].instruments[e].setTypeAndReset(s?2:0,s)}}break;case 114:this.rhythm=e[s.charCodeAt(h++)];break;case 111:if(f){const i=e[s.charCodeAt(h++)];this.channels[i].octave=o(0,t.Config.scrollableOctaves+1,e[s.charCodeAt(h++)])}else for(let i=0;i<this.getChannelCount();i++)this.channels[i].octave=o(0,t.Config.scrollableOctaves+1,e[s.charCodeAt(h++)]);break;case 84:{++k>=this.instrumentsPerChannel&&(y++,k=0),r(0,this.channels.length-1,y);const t=this.channels[y].instruments[k],i=r(0,6,e[s.charCodeAt(h++)]);t.setTypeAndReset(i,y>=this.pitchChannelCount)}break;case 117:{const t=e[s.charCodeAt(h++)]<<6|e[s.charCodeAt(h++)];this.channels[y].instruments[k].preset=t}break;case 119:if(f){const i=[1,2,3,4,5,6,7,8,0],n=e[s.charCodeAt(h++)];this.channels[n].instruments[0].chipWave=o(0,t.Config.chipWaves.length,0|i[e[s.charCodeAt(h++)]])}else if(v){const i=[1,2,3,4,5,6,7,8,0];for(let n=0;n<this.getChannelCount();n++)for(let r=0;r<this.instrumentsPerChannel;r++)n>=this.pitchChannelCount?this.channels[n].instruments[r].chipNoise=o(0,t.Config.chipNoises.length,e[s.charCodeAt(h++)]):this.channels[n].instruments[r].chipWave=o(0,t.Config.chipWaves.length,0|i[e[s.charCodeAt(h++)]])}else if(g){const i=[1,2,3,4,5,6,7,8,0];y>=this.pitchChannelCount?this.channels[y].instruments[k].chipNoise=o(0,t.Config.chipNoises.length,e[s.charCodeAt(h++)]):this.channels[y].instruments[k].chipWave=o(0,t.Config.chipWaves.length,0|i[e[s.charCodeAt(h++)]])}else y>=this.pitchChannelCount?this.channels[y].instruments[k].chipNoise=o(0,t.Config.chipNoises.length,e[s.charCodeAt(h++)]):this.channels[y].instruments[k].chipWave=o(0,t.Config.chipWaves.length,e[s.charCodeAt(h++)]);break;case 102:if(g){const t=[10,6,3,0,8,5,2],i=[1,1,1,1,18,19,20],n=["none","bright","medium","soft","decay bright","decay medium","decay soft"];if(f){const r=e[s.charCodeAt(h++)],a=this.channels[r].instruments[0],l=[1,3,4,5][o(0,n.length,e[s.charCodeAt(h++)])];a.filterCutoff=t[l],a.filterEnvelope=i[l],a.filterResonance=0}else if(v)for(let r=0;r<this.getChannelCount();r++)for(let a=0;a<this.instrumentsPerChannel;a++){const l=this.channels[r].instruments[a],c=o(0,n.length,e[s.charCodeAt(h++)]+1);r<this.pitchChannelCount?(l.filterCutoff=t[c],l.filterEnvelope=i[c],l.filterResonance=0):(l.filterCutoff=10,l.filterEnvelope=1,l.filterResonance=0)}else{const r=o(0,n.length,e[s.charCodeAt(h++)]),a=this.channels[y].instruments[k];a.filterCutoff=t[r],a.filterEnvelope=i[r],a.filterResonance=0}}else{this.channels[y].instruments[k].filterCutoff=o(0,t.Config.filterCutoffRange,e[s.charCodeAt(h++)])}break;case 121:this.channels[y].instruments[k].filterResonance=o(0,t.Config.filterResonanceRange,e[s.charCodeAt(h++)]);break;case 122:{const i=this.channels[y].instruments[k];if(4==i.type)for(let n=0;n<t.Config.drumCount;n++)i.drumsetEnvelopes[n]=o(0,t.Config.envelopes.length,e[s.charCodeAt(h++)]);else i.filterEnvelope=o(0,t.Config.envelopes.length,e[s.charCodeAt(h++)])}break;case 87:{const i=this.channels[y].instruments[k];i.pulseWidth=o(0,t.Config.pulseWidthRange,e[s.charCodeAt(h++)]),i.pulseEnvelope=o(0,t.Config.envelopes.length,e[s.charCodeAt(h++)])}break;case 100:if(f){const i=e[s.charCodeAt(h++)];this.channels[i].instruments[0].transition=o(0,t.Config.transitions.length,e[s.charCodeAt(h++)])}else if(v)for(let i=0;i<this.getChannelCount();i++)for(let n=0;n<this.instrumentsPerChannel;n++)this.channels[i].instruments[n].transition=o(0,t.Config.transitions.length,e[s.charCodeAt(h++)]);else this.channels[y].instruments[k].transition=o(0,t.Config.transitions.length,e[s.charCodeAt(h++)]);break;case 99:if(f){const t=[0,3,2,0],i=[1,1,1,13],n=e[s.charCodeAt(h++)],r=o(0,t.length,e[s.charCodeAt(h++)]),a=this.channels[n].instruments[0];a.vibrato=t[r],a.filterEnvelope=1==a.filterEnvelope?i[r]:a.filterEnvelope}else if(v){const t=[0,1,2,3,0,0],i=[1,1,1,1,16,13];for(let n=0;n<this.getChannelCount();n++)for(let r=0;r<this.instrumentsPerChannel;r++){const a=o(0,t.length,e[s.charCodeAt(h++)]),l=this.channels[n].instruments[r];l.vibrato=t[a],l.filterEnvelope=1==l.filterEnvelope?i[a]:l.filterEnvelope}}else if(g){const t=[0,1,2,3,0,0],i=[1,1,1,1,16,13],n=o(0,t.length,e[s.charCodeAt(h++)]),r=this.channels[y].instruments[k];r.vibrato=t[n],r.filterEnvelope=1==r.filterEnvelope?i[n]:r.filterEnvelope}else{const i=o(0,t.Config.vibratos.length,e[s.charCodeAt(h++)]);this.channels[y].instruments[k].vibrato=i}break;case 104:if(f){const i=e[s.charCodeAt(h++)];this.channels[i].instruments[0].interval=o(0,t.Config.intervals.length,e[s.charCodeAt(h++)])}else if(v)for(let i=0;i<this.getChannelCount();i++)for(let n=0;n<this.instrumentsPerChannel;n++){const r=e[s.charCodeAt(h++)];let a=o(0,t.Config.intervals.length,r);8==r&&(a=2,this.channels[i].instruments[n].chord=3),this.channels[i].instruments[n].interval=a}else if(g){const i=e[s.charCodeAt(h++)];let n=o(0,t.Config.intervals.length,i);8==i&&(n=2,this.channels[y].instruments[k].chord=3),this.channels[y].instruments[k].interval=n}else this.channels[y].instruments[k].interval=o(0,t.Config.intervals.length,e[s.charCodeAt(h++)]);break;case 67:this.channels[y].instruments[k].chord=o(0,t.Config.chords.length,e[s.charCodeAt(h++)]);break;case 113:this.channels[y].instruments[k].effects=o(0,t.Config.effectsNames.length,e[s.charCodeAt(h++)]);break;case 118:if(f){const i=e[s.charCodeAt(h++)],n=this.channels[i].instruments[0];n.volume=o(0,t.Config.volumeRange,e[s.charCodeAt(h++)]),5==n.volume&&(n.volume=t.Config.volumeRange-1)}else if(v)for(let i=0;i<this.getChannelCount();i++)for(let n=0;n<this.instrumentsPerChannel;n++){const r=this.channels[i].instruments[n];r.volume=o(0,t.Config.volumeRange,e[s.charCodeAt(h++)]),5==r.volume&&(r.volume=t.Config.volumeRange-1)}else if(g){const i=this.channels[y].instruments[k];i.volume=o(0,t.Config.volumeRange,e[s.charCodeAt(h++)]),5==i.volume&&(i.volume=t.Config.volumeRange-1)}else{this.channels[y].instruments[k].volume=o(0,t.Config.volumeRange,e[s.charCodeAt(h++)])}break;case 76:this.channels[y].instruments[k].pan=o(0,t.Config.panMax+1,e[s.charCodeAt(h++)]);break;case 65:this.channels[y].instruments[k].algorithm=o(0,t.Config.algorithms.length,e[s.charCodeAt(h++)]);break;case 70:this.channels[y].instruments[k].feedbackType=o(0,t.Config.feedbacks.length,e[s.charCodeAt(h++)]);break;case 66:this.channels[y].instruments[k].feedbackAmplitude=o(0,t.Config.operatorAmplitudeMax+1,e[s.charCodeAt(h++)]);break;case 86:this.channels[y].instruments[k].feedbackEnvelope=o(0,t.Config.envelopes.length,e[s.charCodeAt(h++)]);break;case 81:for(let i=0;i<t.Config.operatorCount;i++)this.channels[y].instruments[k].operators[i].frequency=o(0,t.Config.operatorFrequencies.length,e[s.charCodeAt(h++)]);break;case 80:for(let i=0;i<t.Config.operatorCount;i++)this.channels[y].instruments[k].operators[i].amplitude=o(0,t.Config.operatorAmplitudeMax+1,e[s.charCodeAt(h++)]);break;case 69:for(let i=0;i<t.Config.operatorCount;i++)this.channels[y].instruments[k].operators[i].envelope=o(0,t.Config.envelopes.length,e[s.charCodeAt(h++)]);break;case 83:{const e=this.channels[y].instruments[k];if(3==e.type){const n=Math.ceil(t.Config.spectrumControlPoints*t.Config.spectrumControlPointBits/6),o=new i(s,h,h+n);for(let s=0;s<t.Config.spectrumControlPoints;s++)e.spectrumWave.spectrum[s]=o.read(t.Config.spectrumControlPointBits);e.spectrumWave.markCustomWaveDirty(),h+=n}else{if(4!=e.type)throw new Error("Unhandled instrument type for spectrum song tag code.");{const n=Math.ceil(t.Config.drumCount*t.Config.spectrumControlPoints*t.Config.spectrumControlPointBits/6),o=new i(s,h,h+n);for(let s=0;s<t.Config.drumCount;s++){for(let i=0;i<t.Config.spectrumControlPoints;i++)e.drumsetSpectrumWaves[s].spectrum[i]=o.read(t.Config.spectrumControlPointBits);e.drumsetSpectrumWaves[s].markCustomWaveDirty()}h+=n}}}break;case 72:{const e=this.channels[y].instruments[k],n=Math.ceil(t.Config.harmonicsControlPoints*t.Config.harmonicsControlPointBits/6),o=new i(s,h,h+n);for(let s=0;s<t.Config.harmonicsControlPoints;s++)e.harmonicsWave.harmonics[s]=o.read(t.Config.harmonicsControlPointBits);e.harmonicsWave.markCustomWaveDirty(),h+=n}break;case 98:{let t;if(f){const n=e[s.charCodeAt(h++)],o=e[s.charCodeAt(h++)];t=Math.ceil(.5*o);const r=new i(s,h,h+t);for(let t=0;t<o;t++)this.channels[n].bars[t]=r.read(3)+1}else if(M){let e=0;for(;1<<e<this.patternsPerChannel;)e++;t=Math.ceil(this.getChannelCount()*this.barCount*e/6);const n=new i(s,h,h+t);for(let t=0;t<this.getChannelCount();t++)for(let s=0;s<this.barCount;s++)this.channels[t].bars[s]=n.read(e)+1}else{let e=0;for(;1<<e<this.patternsPerChannel+1;)e++;t=Math.ceil(this.getChannelCount()*this.barCount*e/6);const n=new i(s,h,h+t);for(let t=0;t<this.getChannelCount();t++)for(let s=0;s<this.barCount;s++)this.channels[t].bars[s]=n.read(e)}h+=t}break;case 112:{let o,l=0;if(f)o=e[s.charCodeAt(h++)],h++,l=e[s.charCodeAt(h++)],l<<=6,l+=e[s.charCodeAt(h++)];else{o=0;let t=r(1,4,e[s.charCodeAt(h++)]);for(;t>0;)l<<=6,l+=e[s.charCodeAt(h++)],t--}const c=new i(s,h,h+l);h+=l;let u=0;for(;1<<u<this.instrumentsPerChannel;)u++;for(;;){const s=this.getChannelIsNoise(o),e=s?0:12*this.channels[o].octave;let i=null,h=null,l=(s?4:12)+e;const m=s?[4,6,7,2,3,8,0,10]:[12,19,24,31,36,7,0],d=[];for(let t=0;t<m.length;t++)m[t]+=e;for(let s=0;s<this.patternsPerChannel;s++){const e=this.channels[o].patterns[s];if(e.reset(),e.instrument=c.read(u),!f&&0==c.read(1))continue;let p=0;const M=e.notes;for(;p<this.beatsPerBar*t.Config.partsPerBeat;){const s=1==c.read(1);let e=!1,o=0;if(s?o=r(0,d.length-1,c.readLongTail(0,0)):e=1==c.read(1),s||e){let e,f,u;if(s)e=d[o],d.splice(o,1);else{for((e={}).pitchCount=1;e.pitchCount<t.Config.maxChordSize&&1==c.read(1);)e.pitchCount++;e.pinCount=c.readPinCount(),e.initialVolume=c.read(2),e.pins=[],e.length=0,e.bendCount=0;for(let s=0;s<e.pinCount;s++)(f={}).pitchBend=1==c.read(1),f.pitchBend&&e.bendCount++,e.length+=g?c.readLegacyPartDuration()*t.Config.partsPerBeat/t.Config.rhythms[this.rhythm].stepsPerBeat:c.readPartDuration(),f.time=e.length,f.volume=c.read(2),e.pins.push(f)}d.unshift(e),d.length>10&&d.pop(),(i=new a(0,p,p+e.length,e.initialVolume)).pitches=[],i.pins.length=1;const v=[];for(let t=0;t<e.pitchCount+e.bendCount;t++){if(1==c.read(1)){const t=r(0,m.length-1,c.read(3));u=m[t],m.splice(t,1)}else{const t=c.readPitchInterval();u=l;let s=t;for(;s>0;){for(u++;-1!=m.indexOf(u);)u++;s--}for(;s<0;){for(u--;-1!=m.indexOf(u);)u--;s++}}m.unshift(u),m.length>8&&m.pop(),t<e.pitchCount?i.pitches.push(u):v.push(u),l=t==e.pitchCount-1?i.pitches[0]:u}v.unshift(i.pitches[0]);for(const t of e.pins)t.pitchBend&&v.shift(),h=n(v[0]-i.pitches[0],t.time,t.volume),i.pins.push(h);p=r(0,this.beatsPerBar*t.Config.partsPerBeat,i.end),M.push(i)}else{p+=g?c.readLegacyPartDuration()*t.Config.partsPerBeat/t.Config.rhythms[this.rhythm].stepsPerBeat:c.readPartDuration()}}}if(f)break;if(++o>=this.getChannelCount())break}}break;default:throw new Error("Unrecognized song tag code "+String.fromCharCode(w)+" at index "+(h-1))}}toJsonObject(s=!0,e=1,i=!0){const h=[];for(let n=0;n<this.getChannelCount();n++){const o=[],r=this.getChannelIsNoise(n);for(let t=0;t<this.instrumentsPerChannel;t++)o.push(this.channels[n].instruments[t].toJsonObject());const a=[];for(const s of this.channels[n].patterns){const e=[];for(const i of s.notes){const s=[];for(const e of i.pins)s.push({tick:(e.time+i.start)*t.Config.rhythms[this.rhythm].stepsPerBeat/t.Config.partsPerBeat,pitchBend:e.interval,volume:Math.round(100*e.volume/3)});e.push({pitches:i.pitches,points:s})}a.push({instrument:s.instrument+1,notes:e})}const l=[];if(s)for(let t=0;t<this.loopStart;t++)l.push(this.channels[n].bars[t]);for(let t=0;t<e;t++)for(let t=this.loopStart;t<this.loopStart+this.loopLength;t++)l.push(this.channels[n].bars[t]);if(i)for(let t=this.loopStart+this.loopLength;t<this.barCount;t++)l.push(this.channels[n].bars[t]);h.push({type:r?"drum":"pitch",octaveScrollBar:this.channels[n].octave,instruments:o,patterns:a,sequence:l})}return{format:p.P,version:p.k,scale:t.Config.scales[this.scale].name,key:t.Config.keys[this.key].name,introBars:this.loopStart,loopBars:this.loopLength,beatsPerBar:this.beatsPerBar,ticksPerBeat:t.Config.rhythms[this.rhythm].stepsPerBeat,beatsPerMinute:this.tempo,reverb:this.reverb,channels:h}}fromJsonObject(s){if(this.initToDefault(!0),!s)return;if(this.scale=11,void 0!=s.scale){const e={"romani :)":"dbl harmonic :)","romani :(":"dbl harmonic :(",enigma:"strange"},i=void 0!=e[s.scale]?e[s.scale]:s.scale,h=t.Config.scales.findIndex(t=>t.name==i);-1!=h&&(this.scale=h)}if(void 0!=s.key)if("number"==typeof s.key)this.key=(s.key+1200>>>0)%t.Config.keys.length;else if("string"==typeof s.key){const t=s.key,e=t.charAt(0).toUpperCase(),i=t.charAt(1).toLowerCase();let h={C:0,D:2,E:4,F:5,G:7,A:9,B:11}[e];const n={"#":1,"♯":1,b:-1,"♭":-1}[i];void 0!=h&&(void 0!=n&&(h+=n),h<0&&(h+=12),h%=12,this.key=h)}void 0!=s.beatsPerMinute&&(this.tempo=o(t.Config.tempoMin,t.Config.tempoMax+1,0|s.beatsPerMinute)),void 0!=s.reverb&&(this.reverb=o(0,t.Config.reverbRange,0|s.reverb)),void 0!=s.beatsPerBar&&(this.beatsPerBar=Math.max(t.Config.beatsPerBarMin,Math.min(t.Config.beatsPerBarMax,0|s.beatsPerBar)));let e=4;void 0!=s.ticksPerBeat&&(e=0|s.ticksPerBeat||4,this.rhythm=t.Config.rhythms.findIndex(t=>t.stepsPerBeat==e),-1==this.rhythm&&(this.rhythm=1));let i=1,h=1,r=1;if(s.channels)for(const t of s.channels)t.instruments&&(i=Math.max(i,0|t.instruments.length)),t.patterns&&(h=Math.max(h,0|t.patterns.length)),t.sequence&&(r=Math.max(r,0|t.sequence.length));this.instrumentsPerChannel=Math.min(i,t.Config.instrumentsPerChannelMax),this.patternsPerChannel=Math.min(h,t.Config.barCountMax),this.barCount=Math.min(r,t.Config.barCountMax),void 0!=s.introBars&&(this.loopStart=o(0,this.barCount,0|s.introBars)),void 0!=s.loopBars&&(this.loopLength=o(1,this.barCount-this.loopStart+1,0|s.loopBars));const c=[],f=[];if(s.channels)for(let i=0;i<s.channels.length;i++){let h=s.channels[i];const r=new d;let u=!1;(u=void 0!=h.type?"drum"==h.type:i>=3)?f.push(r):c.push(r),void 0!=h.octaveScrollBar&&(r.octave=o(0,t.Config.scrollableOctaves+1,0|h.octaveScrollBar));for(let t=r.instruments.length;t<this.instrumentsPerChannel;t++)r.instruments[t]=new m(u);r.instruments.length=this.instrumentsPerChannel;for(let t=r.patterns.length;t<this.patternsPerChannel;t++)r.patterns[t]=new l;r.patterns.length=this.patternsPerChannel;for(let t=0;t<this.barCount;t++)r.bars[t]=1;r.bars.length=this.barCount;for(let t=0;t<this.instrumentsPerChannel;t++){r.instruments[t].fromJsonObject(h.instruments[t],u)}for(let s=0;s<this.patternsPerChannel;s++){const i=r.patterns[s];let l=void 0;if(h.patterns&&(l=h.patterns[s]),void 0!=l&&(i.instrument=o(0,this.instrumentsPerChannel,(0|l.instrument)-1),l.notes&&l.notes.length>0)){const s=Math.min(this.beatsPerBar*t.Config.partsPerBeat,l.notes.length>>>0);let h=0;for(let o=0;o<l.notes.length&&!(o>=s);o++){const s=l.notes[o];if(!(s&&s.pitches&&s.pitches.length>=1&&s.points&&s.points.length>=2))continue;const r=new a(0,0,0,0);r.pitches=[],r.pins=[];for(let e=0;e<s.pitches.length;e++){const i=0|s.pitches[e];if(-1==r.pitches.indexOf(i)&&(r.pitches.push(i),r.pitches.length>=t.Config.maxChordSize))break}if(r.pitches.length<1)continue;let c=h,f=0;for(let i=0;i<s.points.length;i++){const h=s.points[i];if(void 0==h||void 0==h.tick)continue;const o=void 0==h.pitchBend?0:0|h.pitchBend,a=Math.round(+h.tick*t.Config.partsPerBeat/e),l=void 0==h.volume?3:Math.max(0,Math.min(3,Math.round(3*(0|h.volume)/100)));if(!(a>this.beatsPerBar*t.Config.partsPerBeat)){if(0==r.pins.length){if(a<c)continue;r.start=a,f=o}else if(a<=c)continue;c=a,r.pins.push(n(o-f,a-r.start,l))}}if(r.pins.length<2)continue;r.end=r.pins[r.pins.length-1].time+r.start;const m=u?t.Config.drumCount-1:t.Config.maxPitch;let d=m,p=0;for(let t=0;t<r.pitches.length;t++)r.pitches[t]+=f,(r.pitches[t]<0||r.pitches[t]>m)&&(r.pitches.splice(t,1),t--),r.pitches[t]<d&&(d=r.pitches[t]),r.pitches[t]>p&&(p=r.pitches[t]);if(!(r.pitches.length<1)){for(let t=0;t<r.pins.length;t++){const s=r.pins[t];s.interval+d<0&&(s.interval=-d),s.interval+p>m&&(s.interval=m-p),t>=2&&s.interval==r.pins[t-1].interval&&s.interval==r.pins[t-2].interval&&s.volume==r.pins[t-1].volume&&s.volume==r.pins[t-2].volume&&(r.pins.splice(t-1,1),t--)}i.notes.push(r),h=r.end}}}}for(let t=0;t<this.barCount;t++)r.bars[t]=h.sequence?Math.min(this.patternsPerChannel,h.sequence[t]>>>0):0}c.length>t.Config.pitchChannelCountMax&&(c.length=t.Config.pitchChannelCountMax),f.length>t.Config.noiseChannelCountMax&&(f.length=t.Config.noiseChannelCountMax),this.pitchChannelCount=c.length,this.noiseChannelCount=f.length,this.channels.length=0,Array.prototype.push.apply(this.channels,c),Array.prototype.push.apply(this.channels,f)}getPattern(t,s){if(s<0||s>=this.barCount)return null;const e=this.channels[t].bars[s];return 0==e?null:this.channels[t].patterns[e-1]}getPatternInstrument(t,s){const e=this.getPattern(t,s);return null==e?0:e.instrument}getBeatsPerMinute(){return this.tempo}}p.P="BeepBox",p.S=2,p.k=8,t.Song=p;class M{constructor(){this.pitches=[0,0,0,0],this.pitchCount=0,this.chordSize=0,this.drumsetPitch=0,this.note=null,this.prevNote=null,this.nextNote=null,this.prevNotePitchIndex=0,this.nextNotePitchIndex=0,this.active=!1,this.noteStart=0,this.noteEnd=0,this.noteLengthTicks=0,this.ticksSinceReleased=0,this.liveInputSamplesHeld=0,this.lastInterval=0,this.lastVolume=0,this.stereoVolume1=0,this.stereoVolume2=0,this.stereoOffset=0,this.stereoDelay=0,this.sample=0,this.phases=[],this.phaseDeltas=[],this.volumeStarts=[],this.volumeDeltas=[],this.volumeStart=0,this.volumeDelta=0,this.phaseDeltaScale=0,this.pulseWidth=0,this.pulseWidthDelta=0,this.filter=0,this.filterScale=0,this.filterSample0=0,this.filterSample1=0,this.vibratoScale=0,this.intervalMult=0,this.intervalVolumeMult=1,this.feedbackOutputs=[],this.feedbackMult=0,this.feedbackDelta=0,this.reset()}reset(){for(let s=0;s<t.Config.operatorCount;s++)this.phases[s]=0,this.feedbackOutputs[s]=0;this.sample=0,this.filterSample0=0,this.filterSample1=0,this.liveInputSamplesHeld=0}}class v{constructor(s=null){this.samplesPerSecond=44100,this.song=null,this.liveInputDuration=0,this.liveInputStarted=!1,this.liveInputPitches=[],this.liveInputChannel=0,this.loopRepeatCount=-1,this.volume=1,this.playheadInternal=0,this.bar=0,this.beat=0,this.part=0,this.tick=0,this.tickSampleCountdown=0,this.isPlayingSong=!1,this.liveInputEndTime=0,this.tonePool=new t.Deque,this.activeTones=[],this.releasedTones=[],this.liveInputTones=new t.Deque,this.limit=0,this.stereoBufferIndex=0,this.samplesForNone=null,this.samplesForReverb=null,this.samplesForChorus=null,this.samplesForChorusReverb=null,this.chorusDelayLine=new Float32Array(2048),this.chorusDelayPos=0,this.chorusPhase=0,this.reverbDelayLine=new Float32Array(16384),this.reverbDelayPos=0,this.reverbFeedback0=0,this.reverbFeedback1=0,this.reverbFeedback2=0,this.reverbFeedback3=0,this.audioCtx=null,this.scriptNode=null,this.audioProcessCallback=(t=>{const s=t.outputBuffer,e=s.getChannelData(0),i=s.getChannelData(1);if(performance.now()<this.liveInputEndTime||this.isPlayingSong)this.synthesize(e,i,s.length,this.isPlayingSong);else{for(let t=0;t<s.length;t++)e[t]=0,i[t]=0;this.deactivateAudio()}}),null!=s&&this.setSong(s)}static warmUpSynthesizer(t){if(null!=t)for(let s=0;s<t.getChannelCount();s++)for(let e=0;e<t.instrumentsPerChannel;e++)v.getInstrumentSynthFunction(t.channels[s].instruments[e]),t.channels[s].instruments[e].warmUp()}static operatorAmplitudeCurve(t){return(Math.pow(16,t/15)-1)/15}get playing(){return this.isPlayingSong}get playhead(){return this.playheadInternal}set playhead(s){if(null!=this.song){this.playheadInternal=Math.max(0,Math.min(this.song.barCount,s));let e=this.playheadInternal;this.bar=Math.floor(e),e=this.song.beatsPerBar*(e-this.bar),this.beat=Math.floor(e),e=t.Config.partsPerBeat*(e-this.beat),this.part=Math.floor(e),e=t.Config.ticksPerPart*(e-this.part),this.tick=Math.floor(e);const i=this.getSamplesPerTick();e=i*(e-this.tick),this.tickSampleCountdown=Math.floor(i-e)}}getSamplesPerBar(){if(null==this.song)throw new Error;return this.getSamplesPerTick()*t.Config.ticksPerPart*t.Config.partsPerBeat*this.song.beatsPerBar}getTotalBars(t,s){if(null==this.song)throw new Error;let e=this.song.loopLength*(this.loopRepeatCount+1);return t&&(e+=this.song.loopStart),s&&(e+=this.song.barCount-(this.song.loopStart+this.song.loopLength)),e}setSong(t){"string"==typeof t?this.song=new p(t):t instanceof p&&(this.song=t)}activateAudio(){null!=this.audioCtx&&null!=this.scriptNode||(this.audioCtx=this.audioCtx||new(window.AudioContext||window.webkitAudioContext),this.samplesPerSecond=this.audioCtx.sampleRate,this.scriptNode=this.audioCtx.createScriptProcessor?this.audioCtx.createScriptProcessor(2048,0,2):this.audioCtx.createJavaScriptNode(2048,0,2),this.scriptNode.onaudioprocess=this.audioProcessCallback,this.scriptNode.channelCountMode="explicit",this.scriptNode.channelInterpretation="speakers",this.scriptNode.connect(this.audioCtx.destination)),this.audioCtx.resume()}deactivateAudio(){null!=this.audioCtx&&null!=this.scriptNode&&(this.scriptNode.disconnect(this.audioCtx.destination),this.scriptNode=null,this.audioCtx.close&&this.audioCtx.close(),this.audioCtx=null)}maintainLiveInput(){this.activateAudio(),this.liveInputEndTime=performance.now()+1e4}play(){this.isPlayingSong||(this.isPlayingSong=!0,v.warmUpSynthesizer(this.song),this.activateAudio())}pause(){this.isPlayingSong&&(this.isPlayingSong=!1)}snapToStart(){this.bar=0,this.snapToBar()}goToBar(t){this.bar=t,this.playheadInternal=this.bar}snapToBar(){this.playheadInternal=this.bar,this.beat=0,this.part=0,this.tick=0,this.tickSampleCountdown=0}resetEffects(){this.reverbDelayPos=0,this.reverbFeedback0=0,this.reverbFeedback1=0,this.reverbFeedback2=0,this.reverbFeedback3=0,this.freeAllTones();for(let t=0;t<this.reverbDelayLine.length;t++)this.reverbDelayLine[t]=0;for(let t=0;t<this.chorusDelayLine.length;t++)this.chorusDelayLine[t]=0;if(null!=this.samplesForNone)for(let t=0;t<this.samplesForNone.length;t++)this.samplesForNone[t]=0;if(null!=this.samplesForReverb)for(let t=0;t<this.samplesForReverb.length;t++)this.samplesForReverb[t]=0;if(null!=this.samplesForChorus)for(let t=0;t<this.samplesForChorus.length;t++)this.samplesForChorus[t]=0;if(null!=this.samplesForChorusReverb)for(let t=0;t<this.samplesForChorusReverb.length;t++)this.samplesForChorusReverb[t]=0}jumpIntoLoop(){if(this.song&&(this.bar<this.song.loopStart||this.bar>=this.song.loopStart+this.song.loopLength)){const t=this.bar;this.bar=this.song.loopStart,this.playheadInternal+=this.bar-t}}nextBar(){if(!this.song)return;const t=this.bar;this.bar++,this.bar>=this.song.barCount&&(this.bar=0),this.playheadInternal+=this.bar-t}prevBar(){if(!this.song)return;const t=this.bar;this.bar--,(this.bar<0||this.bar>=this.song.barCount)&&(this.bar=this.song.barCount-1),this.playheadInternal+=this.bar-t}synthesize(s,e,i,h=!0){if(null==this.song){for(let t=0;t<i;t++)s[t]=0,e[t]=0;return void this.deactivateAudio()}const n=this.song.getChannelCount();for(let s=this.activeTones.length;s<n;s++)this.activeTones[s]=new t.Deque,this.releasedTones[s]=new t.Deque;this.activeTones.length=n,this.releasedTones.length=n;const o=this.getSamplesPerTick();let r=0,a=!1;(0==this.tickSampleCountdown||this.tickSampleCountdown>o)&&(this.tickSampleCountdown=o),h&&(this.beat>=this.song.beatsPerBar&&(this.bar++,this.beat=0,this.part=0,this.tick=0,this.tickSampleCountdown=o,0!=this.loopRepeatCount&&this.bar==this.song.loopStart+this.song.loopLength&&(this.bar=this.song.loopStart,this.loopRepeatCount>0&&this.loopRepeatCount--)),this.bar>=this.song.barCount&&(this.bar=0,-1!=this.loopRepeatCount&&(a=!0,this.pause())));const l=4*i;null!=this.samplesForNone&&this.samplesForNone.length==l&&null!=this.samplesForReverb&&this.samplesForReverb.length==l&&null!=this.samplesForChorus&&this.samplesForChorus.length==l&&null!=this.samplesForChorusReverb&&this.samplesForChorusReverb.length==l||(this.samplesForNone=new Float32Array(l),this.samplesForReverb=new Float32Array(l),this.samplesForChorus=new Float32Array(l),this.samplesForChorusReverb=new Float32Array(l),this.stereoBufferIndex=0);let c=this.stereoBufferIndex;const f=this.samplesForNone,u=this.samplesForReverb,m=this.samplesForChorus,d=this.samplesForChorusReverb,p=+this.volume,M=this.chorusDelayLine,v=this.reverbDelayLine,g=2*Math.PI/(2*this.samplesPerSecond),b=150*this.samplesPerSecond/44100,w=2048-1.51*b,y=2048-2.1*b,k=2048-3.35*b,S=2048-1.47*b,P=2048-2.15*b,T=2048-3.25*b;let C=this.chorusPhase%(2*Math.PI),B=2047&this.chorusDelayPos,O=16383&this.reverbDelayPos,E=+this.reverbFeedback0,I=+this.reverbFeedback1,x=+this.reverbFeedback2,F=+this.reverbFeedback3;const A=.425*Math.pow(this.song.reverb/t.Config.reverbRange,.667),D=1-Math.pow(.5,4/this.samplesPerSecond),z=1-Math.pow(.5,4e3/this.samplesPerSecond);let W=+this.limit;for(;r<i&&!a;){const n=i-r,R=this.tickSampleCountdown<=n?this.tickSampleCountdown:n;for(let s=0;s<this.song.getChannelCount();s++){if(s==this.liveInputChannel){this.determineLiveInputTones(this.song);for(let t=0;t<this.liveInputTones.count();t++){const e=this.liveInputTones.get(t);this.playTone(this.song,c,l,s,o,R,e,!1,!1)}}this.determineCurrentActiveTones(this.song,s,h);for(let t=0;t<this.activeTones[s].count();t++){const e=this.activeTones[s].get(t);this.playTone(this.song,c,l,s,o,R,e,!1,!1)}for(let e=0;e<this.releasedTones[s].count();e++){const i=this.releasedTones[s].get(e);if(i.ticksSinceReleased>=i.instrument.getTransition().releaseTicks){this.freeReleasedTone(s,e),e--;continue}const h=e+this.activeTones[s].count()>=t.Config.maximumTonesPerChannel;this.playTone(this.song,c,l,s,o,R,i,!0,h)}}let U=B+w-b*Math.sin(C+0),N=B+y-b*Math.sin(C+2.1),K=B+k-b*Math.sin(C+4.2),L=B+1024+S-b*Math.sin(C+3.2),V=B+1024+P-b*Math.sin(C+5.3),j=B+1024+T-b*Math.sin(C+1);C+=g*R;const q=(B+R+w-b*Math.sin(C+0)-U)/R,J=(B+R+y-b*Math.sin(C+2.1)-N)/R,G=(B+R+k-b*Math.sin(C+4.2)-K)/R,$=(B+R+1024+S-b*Math.sin(C+3.2)-L)/R,_=(B+R+1024+P-b*Math.sin(C+5.3)-V)/R,H=(B+R+1024+T-b*Math.sin(C+1)-j)/R,Z=r+R;for(let t=r;t<Z;t++){const i=c,h=c+1,n=f[i];f[i]=0;const o=f[h];f[h]=0;const r=u[i];u[i]=0;const a=u[h];u[h]=0;const l=m[i];m[i]=0;const g=m[h];m[h]=0;const b=d[i];d[i]=0;const w=d[h];d[h]=0,c+=2;const y=l+b,k=g+w,S=U%1,P=N%1,T=K%1,C=L%1,R=V%1,Z=j%1,Q=M[2047&U],X=M[U+1&2047],Y=M[2047&N],tt=M[N+1&2047],st=M[2047&K],et=M[K+1&2047],it=M[2047&L],ht=M[L+1&2047],nt=M[2047&V],ot=M[V+1&2047],rt=M[2047&j],at=.5*(y-(Q+(X-Q)*S)+(Y+(tt-Y)*P)-(st+(et-st)*T)),lt=.5*(k-(it+(ht-it)*C)+(nt+(ot-nt)*R)-(rt+(M[j+1&2047]-rt)*Z));M[B]=y,M[B+1024&2047]=k,B=B+1&2047,U+=q,N+=J,K+=G,L+=$,V+=_,j+=H;const ct=O+3041&16383,ft=O+6426&16383,ut=O+10907&16383,mt=v[O],dt=v[ct],pt=v[ft],Mt=v[ut],vt=-(mt+b+r)+dt,gt=-(mt+w+a)-dt,bt=-pt+Mt,wt=-pt-Mt;E+=.5*((vt+bt)*A-E),I+=.5*((gt+wt)*A-I),x+=.5*((vt-bt)*A-x),F+=.5*((gt-wt)*A-F),v[ct]=E,v[ft]=I,v[ut]=x,v[O]=F,O=O+1&16383;const yt=n+at+r+dt+pt+Mt,kt=o+lt+a+mt+pt-Mt,St=yt<0?-yt:yt,Pt=kt<0?-kt:kt,Tt=St>Pt?St:Pt,Ct=p/((W+=(Tt-W)*(W<Tt?z:D))>=1?1.05*W:.8*W+.25);s[t]=yt*Ct,e[t]=kt*Ct}if(r+=R,this.tickSampleCountdown-=R,this.tickSampleCountdown<=0){for(let s=0;s<this.song.getChannelCount();s++)for(let e=0;e<this.releasedTones[s].count();e++){this.releasedTones[s].get(e).ticksSinceReleased++,e+this.activeTones[s].count()>=t.Config.maximumTonesPerChannel&&(this.freeReleasedTone(s,e),e--)}if(this.tick++,this.tickSampleCountdown=o,this.tick==t.Config.ticksPerPart){this.tick=0,this.part++,this.liveInputDuration--;for(let s=0;s<this.song.getChannelCount();s++)for(let e=0;e<this.activeTones[s].count();e++){const i=this.activeTones[s].get(e),h=i.instrument.getTransition();h.isSeamless||null==i.note||i.note.end!=this.part+this.beat*t.Config.partsPerBeat||(h.releases?this.releaseTone(s,i):this.freeTone(i),this.activeTones[s].remove(e),e--)}this.part==t.Config.partsPerBeat&&(this.part=0,h&&(this.beat++,this.beat==this.song.beatsPerBar&&(this.beat=0,this.bar++,0!=this.loopRepeatCount&&this.bar==this.song.loopStart+this.song.loopLength&&(this.bar=this.song.loopStart,this.loopRepeatCount>0&&this.loopRepeatCount--),this.bar>=this.song.barCount&&(this.bar=0,-1!=this.loopRepeatCount&&(a=!0,this.resetEffects(),this.pause())))))}}}-1e-24<E&&E<1e-24&&(E=0),-1e-24<I&&I<1e-24&&(I=0),-1e-24<x&&x<1e-24&&(x=0),-1e-24<F&&F<1e-24&&(F=0),-1e-24<W&&W<1e-24&&(W=0),this.stereoBufferIndex=(this.stereoBufferIndex+2*i)%l,this.chorusPhase=C,this.chorusDelayPos=B,this.reverbDelayPos=O,this.reverbFeedback0=E,this.reverbFeedback1=I,this.reverbFeedback2=x,this.reverbFeedback3=F,this.limit=W,h&&(this.playheadInternal=(((this.tick+1-this.tickSampleCountdown/o)/2+this.part)/t.Config.partsPerBeat+this.beat)/this.song.beatsPerBar+this.bar)}freeTone(t){this.tonePool.pushBack(t)}newTone(){if(this.tonePool.count()>0){const t=this.tonePool.popBack();return t.reset(),t.active=!1,t}return new M}releaseTone(t,s){this.releasedTones[t].pushFront(s)}freeReleasedTone(t,s){this.freeTone(this.releasedTones[t].get(s)),this.releasedTones[t].remove(s)}freeAllTones(){for(;this.liveInputTones.count()>0;)this.freeTone(this.liveInputTones.popBack());for(let t=0;t<this.activeTones.length;t++)for(;this.activeTones[t].count()>0;)this.freeTone(this.activeTones[t].popBack());for(let t=0;t<this.releasedTones.length;t++)for(;this.releasedTones[t].count()>0;)this.freeTone(this.releasedTones[t].popBack())}determineLiveInputTones(t){const s=this.liveInputTones,e=this.liveInputPitches;let i=0;if(this.liveInputDuration>0){const h=t.channels[this.liveInputChannel].instruments[t.getPatternInstrument(this.liveInputChannel,this.bar)];if(h.getChord().arpeggiates){let t;0==s.count()?(t=this.newTone(),s.pushBack(t)):!h.getTransition().isSeamless&&this.liveInputStarted?(this.releaseTone(this.liveInputChannel,s.popFront()),t=this.newTone(),s.pushBack(t)):t=s.get(0),i=1;for(let s=0;s<e.length;s++)t.pitches[s]=e[s];t.pitchCount=e.length,t.chordSize=1,t.instrument=h,t.note=t.prevNote=t.nextNote=null}else for(let t=0;t<e.length;t++){let n;s.count()<=t?(n=this.newTone(),s.pushBack(n)):!h.getTransition().isSeamless&&this.liveInputStarted?(this.releaseTone(this.liveInputChannel,s.get(t)),n=this.newTone(),s.set(t,n)):n=s.get(t),i++,n.pitches[0]=e[t],n.pitchCount=1,n.chordSize=e.length,n.instrument=h,n.note=n.prevNote=n.nextNote=null}}for(;s.count()>i;)this.releaseTone(this.liveInputChannel,s.popBack());this.liveInputStarted=!1}determineCurrentActiveTones(s,e,i){const h=s.channels[e].instruments[s.getPatternInstrument(e,this.bar)],n=s.getPattern(e,this.bar),o=this.part+this.beat*t.Config.partsPerBeat;let r=null,a=null,l=null;if(i&&null!=n&&!s.channels[e].muted)for(let t=0;t<n.notes.length;t++)if(n.notes[t].end<=o)a=n.notes[t];else if(n.notes[t].start<=o&&n.notes[t].end>o)r=n.notes[t];else if(n.notes[t].start>o){l=n.notes[t];break}const c=this.activeTones[e];if(null!=r)null!=a&&a.end!=r.start&&(a=null),null!=l&&l.start!=r.end&&(l=null),this.syncTones(e,c,h,r.pitches,r,a,l,o);else for(;c.count()>0;)c.peakBack().instrument.getTransition().releases?this.releaseTone(e,c.popBack()):this.freeTone(c.popBack())}syncTones(s,e,i,h,n,o,r,a){let l=0;if(i.getChord().arpeggiates){let t;0==e.count()?(t=this.newTone(),e.pushBack(t)):t=e.get(0),l=1;for(let s=0;s<h.length;s++)t.pitches[s]=h[s];t.pitchCount=h.length,t.chordSize=1,t.instrument=i,t.note=n,t.noteStart=n.start,t.noteEnd=n.end,t.prevNote=o,t.nextNote=r,t.prevNotePitchIndex=0,t.nextNotePitchIndex=0}else{const s=i.getTransition();for(let c=0;c<h.length;c++){const h=c*i.getChord().strumParts;let f=o&&o.pitches.length>c?o:null,u=n,m=r&&r.pitches.length>c?r:null,d=u.start+h;if(d>a){if(!(e.count()>c&&s.isSeamless&&null!=f))break;m=u,u=f,f=null,d=u.start+h}let p,M=u.end;s.isSeamless&&null!=m&&(M=Math.min(t.Config.partsPerBeat*this.song.beatsPerBar,M+h)),e.count()<=c?(p=this.newTone(),e.pushBack(p)):p=e.get(c),l++,p.pitches[0]=u.pitches[c],p.pitchCount=1,p.chordSize=u.pitches.length,p.instrument=i,p.note=u,p.noteStart=d,p.noteEnd=M,p.prevNote=f,p.nextNote=m,p.prevNotePitchIndex=c,p.nextNotePitchIndex=c}}for(;e.count()>l;)e.peakBack().instrument.getTransition().releases?this.releaseTone(s,e.popBack()):this.freeTone(e.popBack())}playTone(t,s,e,i,h,n,o,r,a){let l;switch(v.computeTone(this,t,i,h,n,o,r,a),o.instrument.effects){case 0:l=this.samplesForNone;break;case 1:l=this.samplesForReverb;break;case 2:l=this.samplesForChorus;break;case 3:l=this.samplesForChorusReverb;break;default:throw new Error}v.getInstrumentSynthFunction(o.instrument)(this,l,s,e,2*n,o,o.instrument)}static computeEnvelope(t,s,e,i){switch(t.type){case 0:return i;case 1:return 1;case 4:return 1/(1+s*t.speed);case 5:return 1-1/(1+s*t.speed);case 6:return.5-.5*Math.cos(2*e*Math.PI*t.speed);case 7:return.75-.25*Math.cos(2*e*Math.PI*t.speed);case 2:return Math.max(1,2-10*s);case 3:const h=t.speed,n=.25/Math.sqrt(h);return s<n?s/n:1/(1+(s-n)*h);case 8:return Math.pow(2,-t.speed*s);default:throw new Error("Unrecognized operator envelope type.")}}static computeChordVolume(t){return 1/(.25*(t-1)+1)}static computeTone(s,e,i,h,n,o,r,a){const l=o.instrument,c=l.getTransition(),f=l.getChord(),u=f.arpeggiates?1:v.computeChordVolume(o.chordSize),d=e.getChannelIsNoise(i),p=d?t.Config.noiseInterval:1,M=t.Config.ticksPerPart*h/s.samplesPerSecond,g=1/t.Config.partsPerBeat,b=o.active,w=s.tickSampleCountdown,y=1-w/h,k=1-(w-n)/h,S=(s.beat*t.Config.partsPerBeat+s.part)*t.Config.ticksPerPart+s.tick,P=S/t.Config.ticksPerPart,T=(S+1)/t.Config.ticksPerPart,C=P+(T-P)*y,B=P+(T-P)*k;o.phaseDeltaScale=0,o.filter=1,o.filterScale=1,o.vibratoScale=0,o.intervalMult=1,o.intervalVolumeMult=1,o.active=!1;const O=(l.pan-t.Config.panCenter)/t.Config.panCenter,E=65e-5*s.samplesPerSecond,I=2*Math.round(-O*E),x=1.414*Math.cos((1+O)*Math.PI*.25),F=1.414*Math.cos((1-O)*Math.PI*.25),A=Math.max(0,-I),D=Math.max(0,I);I>=0?(o.stereoVolume1=x,o.stereoVolume2=F,o.stereoOffset=0,o.stereoDelay=D+1):(o.stereoVolume1=F,o.stereoVolume2=x,o.stereoOffset=1,o.stereoDelay=A-1);let z,W,R,U,N=!0,K=0,L=0,V=0,j=1,q=1,J=u,G=u,$=0,_=0,H=0,Z=0;if(3==l.type)d?(W=t.Config.spectrumBasePitch,R=.6):(W=t.Config.keys[e.key].basePitch,R=.3),z=t.Config.spectrumBasePitch,U=28;else if(4==l.type)R=.45,z=W=t.Config.spectrumBasePitch,U=48;else if(2==l.type)R=.19,z=W=t.Config.chipNoises[l.chipNoise].basePitch,U=t.Config.chipNoises[l.chipNoise].isSoft?24:60;else if(1==l.type)W=t.Config.keys[e.key].basePitch,R=.03,z=16,U=48;else if(0==l.type)W=t.Config.keys[e.key].basePitch,R=.03375,z=16,U=48;else if(5==l.type)W=t.Config.keys[e.key].basePitch,R=.025,z=16,U=48;else{if(6!=l.type)throw new Error("Unknown instrument type in computeTone.");W=t.Config.keys[e.key].basePitch,R=.04725,z=16,U=48}for(let s=0;s<t.Config.operatorCount;s++)o.phaseDeltas[s]=0,o.volumeStarts[s]=0,o.volumeDeltas[s]=0;if(r){const s=o.noteLengthTicks+o.ticksSinceReleased,e=o.ticksSinceReleased+y,i=o.ticksSinceReleased+k,h=o.noteLengthTicks+e,n=o.noteLengthTicks+i,r=o.instrument.getTransition();N=!1,K=Math.floor(s/t.Config.ticksPerPart),L=V=o.lastInterval,$=_=v.expressionToVolumeMult(o.lastVolume),j=v.expressionToVolumeMult(3*(1-e/r.releaseTicks)),q=v.expressionToVolumeMult(3*(1-i/r.releaseTicks)),H=h/t.Config.ticksPerPart,Z=n/t.Config.ticksPerPart,a&&(j*=1-y,q*=1-k)}else if(null==o.note){j=q=1,$=_=1,o.lastInterval=0,o.lastVolume=3,o.ticksSinceReleased=0,N=!1;const s=o.liveInputSamplesHeld/h;o.liveInputSamplesHeld+=n;const e=o.liveInputSamplesHeld/h;o.noteLengthTicks=e;const i=s/t.Config.ticksPerPart,r=e/t.Config.ticksPerPart;K=Math.floor(i),H=i,Z=r}else{const i=o.note,h=o.prevNote,n=o.nextNote,r=s.part+s.beat*t.Config.partsPerBeat,a=t.Config.partsPerBeat*e.beatsPerBar,l=o.noteStart,m=o.noteEnd;let d;for(K=r-l,d=1;d<i.pins.length-1&&!(i.pins[d].time+i.start>r);d++);const p=i.pins[d-1],M=i.pins[d],g=l*t.Config.ticksPerPart,w=m*t.Config.ticksPerPart-g,S=(i.start+p.time)*t.Config.ticksPerPart,C=(i.start+M.time)*t.Config.ticksPerPart;o.lastInterval=i.pins[i.pins.length-1].interval,o.lastVolume=i.pins[i.pins.length-1].volume,o.ticksSinceReleased=0,o.noteLengthTicks=w;const B=r*t.Config.ticksPerPart+s.tick,O=r*t.Config.ticksPerPart+s.tick+1,E=B-g,I=O-g,x=Math.min(1,(B-S)/(C-S)),F=Math.min(1,(O-S)/(C-S));let A=p.volume+(M.volume-p.volume)*x,D=p.volume+(M.volume-p.volume)*F,z=1,W=1,R=u,U=u,Q=p.interval+(M.interval-p.interval)*x,X=p.interval+(M.interval-p.interval)*F,Y=P-l,tt=T-l;N=B+y-g==0||!b;const st=.5*w;if(c.isSeamless&&!c.slides&&0==i.start)N=!b;else if(c.isSeamless&&null!=h&&(N=!b,c.slides)){const t=Math.min(st,c.slideTicks),s=Math.max(0,1-E/t),e=Math.max(0,1-I/t),n=.5*(h.pitches[o.prevNotePitchIndex]+h.pins[h.pins.length-1].interval-o.pitches[0]),r=.5*(h.pins[h.pins.length-1].volume-i.pins[0].volume),a=.5*(h.end-h.start);if(Q+=s*n,X+=e*n,A+=s*r,D+=e*r,Y+=s*a,tt+=e*a,!f.arpeggiates){const t=.5*(h.pitches.length-o.chordSize);R=v.computeChordVolume(o.chordSize+s*t),U=v.computeChordVolume(o.chordSize+e*t)}}if(c.isSeamless&&!c.slides&&i.end==a);else if(c.isSeamless&&null!=n){if(c.slides){const t=Math.min(st,c.slideTicks),s=Math.max(0,1-(w-E)/t),e=Math.max(0,1-(w-I)/t),h=.5*(n.pitches[o.nextNotePitchIndex]-(o.pitches[0]+i.pins[i.pins.length-1].interval)),r=.5*(n.pins[0].volume-i.pins[i.pins.length-1].volume),a=.5*-(m-l);if(Q+=s*h,X+=e*h,A+=s*r,D+=e*r,Y+=s*a,tt+=e*a,!f.arpeggiates){const t=.5*(n.pitches.length-o.chordSize);R=v.computeChordVolume(o.chordSize+s*t),U=v.computeChordVolume(o.chordSize+e*t)}}}else if(!c.releases){const t=c.releaseTicks;t>0&&(z*=Math.min(1,(w-E)/t),W*=Math.min(1,(w-I)/t))}L=Q+(X-Q)*y,V=Q+(X-Q)*k,$=v.expressionToVolumeMult(A+(D-A)*y),_=v.expressionToVolumeMult(A+(D-A)*k),j=z+(W-z)*y,q=z+(W-z)*k,J=R+(U-R)*y,G=R+(U-R)*k,H=Y+(tt-Y)*y,Z=Y+(tt-Y)*k}const Q=1/s.samplesPerSecond;if(o.active=!0,0==l.type||1==l.type||5==l.type||6==l.type){const s=v.getLFOAmplitude(l,M*C),e=v.getLFOAmplitude(l,M*B),i=K<t.Config.vibratos[l.vibrato].delayParts?0:t.Config.vibratos[l.vibrato].amplitude;L+=i*s,V+=i*e}if(!c.isSeamless||(c.slides||null==o.note||0!=o.note.start)&&null==o.prevNote){const t=c.attackSeconds;t>0&&(j*=Math.min(1,M*H/t),q*=Math.min(1,M*Z/t))}const X=v.instrumentVolumeToVolumeMult(l.volume);4==l.type&&(o.drumsetPitch=o.pitches[0],null!=o.note&&(o.drumsetPitch+=o.note.pickMainInterval()),o.drumsetPitch=Math.max(0,Math.min(t.Config.drumCount-1,o.drumsetPitch)));const Y=l.getFilterCutoffOctaves(),tt=4==l.type?l.getDrumsetEnvelope(o.drumsetPitch):l.getFilterEnvelope(),st=t.Config.filterCutoffMaxHz*Math.pow(2,Y),et=2*Math.sin(Math.PI*st/s.samplesPerSecond),it=2*Math.sin(Math.PI*t.Config.filterCutoffMinHz/s.samplesPerSecond);o.filter=et*v.computeEnvelope(tt,M*H,g*C,$);let ht=et*v.computeEnvelope(tt,M*Z,g*B,_);o.filter=Math.min(t.Config.filterMax,Math.max(it,o.filter)),ht=Math.min(t.Config.filterMax,Math.max(it,ht)),o.filterScale=Math.pow(ht/o.filter,1/n);let nt=Math.pow(.5,.35*Y);if(l.filterResonance>0&&(nt=Math.pow(nt,1.7)*Math.pow(.5,.125*(l.filterResonance-1))),8==tt.type?nt*=1.25+.025*tt.speed:4==tt.type&&(nt*=1+.02*tt.speed),N&&o.reset(),1==l.type){let i=1,h=0,r=0;if(o.pitchCount>1&&!f.harmonizes){const i=Math.floor((s.tick+s.part*t.Config.ticksPerPart)/t.Config.rhythms[e.rhythm].ticksPerArpeggio);r=o.pitches[t.getArpeggioPitchIndex(o.pitchCount,e.rhythm,i)]-o.pitches[0]}const a=t.Config.algorithms[l.algorithm].carrierCount;for(let s=0;s<t.Config.operatorCount;s++){const e=t.Config.algorithms[l.algorithm].associatedCarrier[s]-1,c=o.pitches[f.harmonizes?s<o.pitchCount?s:e<o.pitchCount?e:0:0],u=t.Config.operatorFrequencies[l.operators[s].frequency].mult,d=t.Config.operatorCarrierInterval[e]+r,b=W+(c+L)*p+d,w=u*m.frequencyFromPitch(b)+t.Config.operatorFrequencies[l.operators[s].frequency].hzOffset;o.phaseDeltas[s]=w*Q*t.Config.sineWaveLength;const y=v.operatorAmplitudeCurve(l.operators[s].amplitude),k=y*t.Config.operatorFrequencies[l.operators[s].frequency].amplitudeSign;let S=k,P=k;if(s<a){const t=W+(c+V)*p+d,s=Math.pow(2,-(b-z)/U),e=Math.pow(2,-(t-z)/U);S*=s,P*=e,h+=y}else S*=1.5*t.Config.sineWaveLength,P*=1.5*t.Config.sineWaveLength,i*=1-Math.min(1,l.operators[s].amplitude/15);const T=t.Config.envelopes[l.operators[s].envelope];S*=v.computeEnvelope(T,M*H,g*C,$),P*=v.computeEnvelope(T,M*Z,g*B,_),o.volumeStarts[s]=S,o.volumeDeltas[s]=(P-S)/n}const c=.3*t.Config.sineWaveLength*l.feedbackAmplitude/15,u=t.Config.envelopes[l.feedbackEnvelope];let d=c*v.computeEnvelope(u,M*H,g*C,$),b=c*v.computeEnvelope(u,M*Z,g*B,_);o.feedbackMult=d,o.feedbackDelta=(b-o.feedbackMult)/n;const w=R*X;o.volumeStart=nt*w*j*J;const y=nt*w*q*G;o.volumeDelta=(y-o.volumeStart)/n,i*=(Math.pow(2,2-1.4*l.feedbackAmplitude/15)-1)/3,i*=1-Math.min(1,Math.max(0,h-1)/2),o.volumeStart*=1+3*i,o.volumeDelta*=1+3*i}else{let i=o.pitches[0];if(o.pitchCount>1){const h=Math.floor((s.tick+s.part*t.Config.ticksPerPart)/t.Config.rhythms[e.rhythm].ticksPerArpeggio);if(f.harmonizes){const s=o.pitches[1+t.getArpeggioPitchIndex(o.pitchCount-1,e.rhythm,h)]-o.pitches[0];o.intervalMult=Math.pow(2,s/12),o.intervalVolumeMult=Math.pow(2,-s/U)}else i=o.pitches[t.getArpeggioPitchIndex(o.pitchCount,e.rhythm,h)]}const h=W+(i+L)*p,r=W+(i+V)*p,a=m.frequencyFromPitch(h),c=Math.pow(2,-(h-z)/U),u=Math.pow(2,-(r-z)/U);let d=R*nt;if(2==l.type&&(d*=t.Config.chipNoises[l.chipNoise].volume),0==l.type&&(d*=t.Config.chipWaves[l.chipWave].volume),0!=l.type&&5!=l.type||(d*=t.Config.intervals[l.interval].volume),6==l.type){const s=t.Config.envelopes[l.pulseEnvelope],e=.5*Math.pow(.5,.5*(t.Config.pulseWidthRange-l.pulseWidth-1)),i=e*v.computeEnvelope(s,M*H,g*C,$),h=e*v.computeEnvelope(s,M*Z,g*B,_);o.pulseWidth=i,o.pulseWidthDelta=(h-i)/n}o.phaseDeltas[0]=a*Q,o.volumeStart=j*J*c*d*X;let b=q*G*u*d*X;0==tt.type||6==l.type&&0==t.Config.envelopes[l.pulseEnvelope].type||(o.volumeStart*=$,b*=_),o.volumeDelta=(b-o.volumeStart)/n}o.phaseDeltaScale=Math.pow(2,(V-L)*p/12/n)}static getLFOAmplitude(s,e){let i=0;for(const h of t.Config.vibratos[s.vibrato].periodsSeconds)i+=Math.sin(2*Math.PI*e/h);return i}static getInstrumentSynthFunction(s){if(1==s.type){const e=s.algorithm+"_"+s.feedbackType;if(void 0==v.fmSynthFunctionCache[e]){const i=[];for(const e of v.fmSourceTemplate)if(-1!=e.indexOf("// CARRIER OUTPUTS")){const h=[];for(let e=0;e<t.Config.algorithms[s.algorithm].carrierCount;e++)h.push("operator"+e+"Scaled");i.push(e.replace("/*operator#Scaled*/",h.join(" + ")))}else if(-1!=e.indexOf("// INSERT OPERATOR COMPUTATION HERE"))for(let e=t.Config.operatorCount-1;e>=0;e--)for(const h of v.operatorSourceTemplate)if(-1!=h.indexOf("/* + operator@Scaled*/")){let n="";for(const i of t.Config.algorithms[s.algorithm].modulatedBy[e])n+=" + operator"+(i-1)+"Scaled";const o=t.Config.feedbacks[s.feedbackType].indices[e];if(o.length>0){n+=" + feedbackMult * (";const t=[];for(const s of o)t.push("operator"+(s-1)+"Output");n+=t.join(" + ")+")"}i.push(h.replace(/\#/g,e+"").replace("/* + operator@Scaled*/",n))}else i.push(h.replace(/\#/g,e+""));else if(-1!=e.indexOf("#"))for(let s=0;s<t.Config.operatorCount;s++)i.push(e.replace(/\#/g,s+""));else i.push(e);v.fmSynthFunctionCache[e]=new Function("synth","data","stereoBufferIndex","stereoBufferLength","runLength","tone","instrument",i.join("\n"))}return v.fmSynthFunctionCache[e]}if(0==s.type)return v.chipSynth;if(5==s.type)return v.harmonicsSynth;if(6==s.type)return v.pulseWidthSynth;if(2==s.type)return v.noiseSynth;if(3==s.type)return v.spectrumSynth;if(4==s.type)return v.drumsetSynth;throw new Error("Unrecognized instrument type: "+s.type)}static chipSynth(s,e,i,h,n,o,r){const a=t.Config.chipWaves[r.chipWave].samples,l=+a.length-1,c=+Math.pow(2,(t.Config.intervals[r.interval].offset+t.Config.intervals[r.interval].spread)/12),f=Math.pow(2,(t.Config.intervals[r.interval].offset-t.Config.intervals[r.interval].spread)/12)*o.intervalMult,u=o.intervalVolumeMult*t.Config.intervals[r.interval].sign;0!=r.interval||r.getChord().customInterval||(o.phases[1]=o.phases[0]);const m=f/c;let d=o.phaseDeltas[0]*c*l,p=d*m;const M=+o.phaseDeltaScale;let v=+o.volumeStart;const g=+o.volumeDelta;let b=o.phases[0]%1*l,w=o.phases[1]%1*l,y=+o.filter,k=r.getFilterIsFirstOrder()?1:y;const S=+o.filterScale,P=r.getFilterIsFirstOrder()?1:S,T=t.Config.filterMaxResonance*Math.pow(Math.max(0,r.getFilterResonance()-1)/(t.Config.filterResonanceRange-2),.5);let C=+o.filterSample0,B=+o.filterSample1;const O=0|b,E=0|w,I=O%l,x=E%l,F=b-O,A=w-E;let D=a[I],z=a[x];D+=(a[I+1]-D)*F,z+=(a[x+1]-z)*A;const W=i+n;i+=o.stereoOffset;const R=o.stereoVolume1,U=o.stereoVolume2,N=o.stereoDelay;for(;i<W;){const t=0|(b+=d),s=0|(w+=p),n=t%l,o=s%l;let r=a[n],c=a[o];const f=b-t,m=w-s;let O=((r+=(a[n+1]-r)*f)-D)/d,E=((c+=(a[o+1]-c)*m)-z)/p;D=r,z=c,B+=k*((C+=y*(O+E*u-C+(T+T/(1-y))*(C-B)))-B),y*=S,k*=P,d*=M,p*=M;const I=B*v;v+=g,e[i]+=I*R,e[(i+N)%h]+=I*U,i+=2}o.phases[0]=b/l,o.phases[1]=w/l;-1e-24<C&&C<1e-24&&(C=0),-1e-24<B&&B<1e-24&&(B=0),o.filterSample0=C,o.filterSample1=B}static harmonicsSynth(s,e,i,h,n,o,r){const a=r.harmonicsWave.getCustomWave(),l=+a.length-1,c=+Math.pow(2,(t.Config.intervals[r.interval].offset+t.Config.intervals[r.interval].spread)/12),f=Math.pow(2,(t.Config.intervals[r.interval].offset-t.Config.intervals[r.interval].spread)/12)*o.intervalMult,u=o.intervalVolumeMult*t.Config.intervals[r.interval].sign;0!=r.interval||r.getChord().customInterval||(o.phases[1]=o.phases[0]);const m=f/c;let d=o.phaseDeltas[0]*c*l,p=d*m;const M=+o.phaseDeltaScale;let v=+o.volumeStart;const g=+o.volumeDelta;let b=o.phases[0]%1*l,w=o.phases[1]%1*l,y=+o.filter,k=r.getFilterIsFirstOrder()?1:y;const S=+o.filterScale,P=r.getFilterIsFirstOrder()?1:S,T=t.Config.filterMaxResonance*Math.pow(Math.max(0,r.getFilterResonance()-1)/(t.Config.filterResonanceRange-2),.5);let C=+o.filterSample0,B=+o.filterSample1;const O=0|b,E=0|w,I=O%l,x=E%l,F=b-O,A=w-E;let D=a[I],z=a[x];D+=(a[I+1]-D)*F,z+=(a[x+1]-z)*A;const W=i+n;i+=o.stereoOffset;const R=o.stereoVolume1,U=o.stereoVolume2,N=o.stereoDelay;for(;i<W;){const t=0|(b+=d),s=0|(w+=p),n=t%l,o=s%l;let r=a[n],c=a[o];const f=b-t,m=w-s;let O=((r+=(a[n+1]-r)*f)-D)/d,E=((c+=(a[o+1]-c)*m)-z)/p;D=r,z=c,B+=k*((C+=y*(O+E*u-C+(T+T/(1-y))*(C-B)))-B),y*=S,k*=P,d*=M,p*=M;const I=B*v;v+=g,e[i]+=I*R,e[(i+N)%h]+=I*U,i+=2}o.phases[0]=b/l,o.phases[1]=w/l;-1e-24<C&&C<1e-24&&(C=0),-1e-24<B&&B<1e-24&&(B=0),o.filterSample0=C,o.filterSample1=B}static pulseWidthSynth(s,e,i,h,n,o,r){let a=o.phaseDeltas[0];const l=+o.phaseDeltaScale;let c=+o.volumeStart;const f=+o.volumeDelta;let u=o.phases[0]%1,m=o.pulseWidth;const d=o.pulseWidthDelta;let p=+o.filter,M=r.getFilterIsFirstOrder()?1:p;const v=+o.filterScale,g=r.getFilterIsFirstOrder()?1:v,b=t.Config.filterMaxResonance*Math.pow(Math.max(0,r.getFilterResonance()-1)/(t.Config.filterResonanceRange-2),.5);let w=+o.filterSample0,y=+o.filterSample1;const k=i+n;i+=o.stereoOffset;const S=o.stereoVolume1,P=o.stereoVolume2,T=o.stereoDelay;for(;i<k;){const t=u%1,s=(u+m)%1;let n=s-t;if(t<a)n+=.5*((C=t/a)+C-C*C-1);else if(t>1-a){n+=.5*((C=(t-1)/a)+C+C*C+1)}if(s<a)n-=.5*((C=s/a)+C-C*C-1);else if(s>1-a){var C;n-=.5*((C=(s-1)/a)+C+C*C+1)}y+=M*((w+=p*(n-w+(b+b/(1-p))*(w-y)))-y),p*=v,M*=g,u+=a,a*=l,m+=d;const o=y*c;c+=f,e[i]+=o*S,e[(i+T)%h]+=o*P,i+=2}o.phases[0]=u;-1e-24<w&&w<1e-24&&(w=0),-1e-24<y&&y<1e-24&&(y=0),o.filterSample0=w,o.filterSample1=y}static noiseSynth(s,e,i,h,n,o,r){let a=r.getDrumWave(),l=+o.phaseDeltas[0];const c=+o.phaseDeltaScale;let f=+o.volumeStart;const u=+o.volumeDelta;let m=o.phases[0]%1*t.Config.chipNoiseLength;0==o.phases[0]&&(m=Math.random()*t.Config.chipNoiseLength);let d=+o.sample,p=+o.filter,M=r.getFilterIsFirstOrder()?1:p;const v=+o.filterScale,g=r.getFilterIsFirstOrder()?1:v,b=t.Config.filterMaxResonance*Math.pow(Math.max(0,r.getFilterResonance()-1)/(t.Config.filterResonanceRange-2),.5);let w=+o.filterSample0,y=+o.filterSample1;const k=Math.min(1,o.phaseDeltas[0]*t.Config.chipNoises[r.chipNoise].pitchFilterMult),S=i+n;i+=o.stereoOffset;const P=o.stereoVolume1,T=o.stereoVolume2,C=o.stereoDelay;for(;i<S;){y+=M*((w+=p*((d+=(a[32767&m]-d)*k)-w+(b+b/(1-p))*(w-y)))-y),m+=l,p*=v,M*=g,l*=c;const t=y*f;f+=u,e[i]+=t*P,e[(i+C)%h]+=t*T,i+=2}o.phases[0]=m/t.Config.chipNoiseLength,o.sample=d;-1e-24<w&&w<1e-24&&(w=0),-1e-24<y&&y<1e-24&&(y=0),o.filterSample0=w,o.filterSample1=y}static spectrumSynth(s,e,i,h,n,o,r){let a=r.getDrumWave(),l=128*o.phaseDeltas[0];const c=+o.phaseDeltaScale;let f=+o.volumeStart;const u=+o.volumeDelta;let m=+o.sample,d=+o.filter,p=r.getFilterIsFirstOrder()?1:d;const M=+o.filterScale,g=r.getFilterIsFirstOrder()?1:M,b=t.Config.filterMaxResonance*Math.pow(Math.max(0,r.getFilterResonance()-1)/(t.Config.filterResonanceRange-2),.5);let w=+o.filterSample0,y=+o.filterSample1,k=o.phases[0]%1*t.Config.chipNoiseLength;0==o.phases[0]&&(k=v.findRandomZeroCrossing(a)+l);const S=Math.min(1,l),P=i+n;i+=o.stereoOffset;const T=o.stereoVolume1,C=o.stereoVolume2,B=o.stereoDelay;for(;i<P;){const t=0|k,s=32767&t;let n=a[s];const o=k-t;y+=p*((w+=d*((m+=((n+=(a[s+1]-n)*o)-m)*S)-w+(b+b/(1-d))*(w-y)))-y),k+=l,d*=M,p*=g,l*=c;const r=y*f;f+=u,e[i]+=r*T,e[(i+B)%h]+=r*C,i+=2}o.phases[0]=k/t.Config.chipNoiseLength,o.sample=m;-1e-24<w&&w<1e-24&&(w=0),-1e-24<y&&y<1e-24&&(y=0),o.filterSample0=w,o.filterSample1=y}static drumsetSynth(s,e,i,h,n,o,r){let a=r.getDrumsetWave(o.drumsetPitch),l=o.phaseDeltas[0]/m.drumsetIndexReferenceDelta(o.drumsetPitch);const c=+o.phaseDeltaScale;let f=+o.volumeStart;const u=+o.volumeDelta;let d=+o.sample,p=+o.filter,M=r.getFilterIsFirstOrder()?1:p;const g=+o.filterScale,b=r.getFilterIsFirstOrder()?1:g,w=t.Config.filterMaxResonance*Math.pow(Math.max(0,r.getFilterResonance()-1)/(t.Config.filterResonanceRange-2),.5);let y=+o.filterSample0,k=+o.filterSample1,S=o.phases[0]%1*t.Config.chipNoiseLength;0==o.phases[0]&&(S=v.findRandomZeroCrossing(a)+l);const P=i+n;i+=o.stereoOffset;const T=o.stereoVolume1,C=o.stereoVolume2,B=o.stereoDelay;for(;i<P;){const t=0|S,s=32767&t;d=a[s];const n=S-t;k+=M*((y+=p*((d+=(a[s+1]-d)*n)-y+(w+w/(1-p))*(y-k)))-k),S+=l,p*=g,M*=b,l*=c;const o=k*f;f+=u,e[i]+=o*T,e[(i+B)%h]+=o*C,i+=2}o.phases[0]=S/t.Config.chipNoiseLength,o.sample=d;-1e-24<y&&y<1e-24&&(y=0),-1e-24<k&&k<1e-24&&(k=0),o.filterSample0=y,o.filterSample1=k}static findRandomZeroCrossing(s){let e=Math.random()*t.Config.chipNoiseLength,i=32767&e,h=s[i];for(let n=128;n>0;n--){const n=i+16&32767,o=s[n];if(h*o<=0){for(let n=0;n<16;n++){const n=i+1&32767,o=s[n];if(h*o<=0){const s=o-h;e=i,Math.abs(s)>1e-8&&(e+=-h/s),e=Math.max(0,e)%t.Config.chipNoiseLength;break}i=n,h=o}break}i=n,h=o}return e}static instrumentVolumeToVolumeMult(s){return s==t.Config.volumeRange-1?0:Math.pow(2,t.Config.volumeLogScale*s)}static volumeMultToInstrumentVolume(s){return s<=0?t.Config.volumeRange-1:Math.min(t.Config.volumeRange-2,Math.log(s)/Math.LN2/t.Config.volumeLogScale)}static expressionToVolumeMult(t){return Math.pow(Math.max(0,t)/3,1.5)}static volumeMultToExpression(t){return 3*Math.pow(Math.max(0,t),1/1.5)}getSamplesPerTick(){if(null==this.song)return 0;const s=this.song.getBeatsPerMinute()/60*t.Config.partsPerBeat*t.Config.ticksPerPart;return Math.floor(this.samplesPerSecond/s)}}v.fmSynthFunctionCache={},v.fmSourceTemplate=("\n\t\t\tconst sineWave = beepbox.Config.sineWave;\n\t\t\t\n\t\t\tlet phaseDeltaScale = +tone.phaseDeltaScale;\n\t\t\t// I'm adding 1000 to the phase to ensure that it's never negative even when modulated by other waves because negative numbers don't work with the modulus operator very well.\n\t\t\tlet operator#Phase       = +((tone.phases[#] % 1) + 1000) * beepbox.Config.sineWaveLength;\n\t\t\tlet operator#PhaseDelta  = +tone.phaseDeltas[#];\n\t\t\tlet operator#OutputMult  = +tone.volumeStarts[#];\n\t\t\tconst operator#OutputDelta = +tone.volumeDeltas[#];\n\t\t\tlet operator#Output      = +tone.feedbackOutputs[#];\n\t\t\tlet feedbackMult         = +tone.feedbackMult;\n\t\t\tconst feedbackDelta        = +tone.feedbackDelta;\n\t\t\tlet volume = +tone.volumeStart;\n\t\t\tconst volumeDelta = +tone.volumeDelta;\n\t\t\t\n\t\t\tlet filter1 = +tone.filter;\n\t\t\tlet filter2 = instrument.getFilterIsFirstOrder() ? 1.0 : filter1;\n\t\t\tconst filterScale1 = +tone.filterScale;\n\t\t\tconst filterScale2 = instrument.getFilterIsFirstOrder() ? 1.0 : filterScale1;\n\t\t\tconst filterResonance = beepbox.Config.filterMaxResonance * Math.pow(Math.max(0, instrument.getFilterResonance() - 1) / (beepbox.Config.filterResonanceRange - 2), 0.5);\n\t\t\tlet filterSample0 = +tone.filterSample0;\n\t\t\tlet filterSample1 = +tone.filterSample1;\n\t\t\t\n\t\t\tconst stopIndex = stereoBufferIndex + runLength;\n\t\t\tstereoBufferIndex += tone.stereoOffset;\n\t\t\tconst stereoVolume1 = tone.stereoVolume1;\n\t\t\tconst stereoVolume2 = tone.stereoVolume2;\n\t\t\tconst stereoDelay = tone.stereoDelay;\n\t\t\twhile (stereoBufferIndex < stopIndex) {\n\t\t\t\t// INSERT OPERATOR COMPUTATION HERE\n\t\t\t\tconst fmOutput = (/*operator#Scaled*/); // CARRIER OUTPUTS\n\t\t\t\t\n\t\t\t\tconst feedback = filterResonance + filterResonance / (1.0 - filter1);\n\t\t\t\tfilterSample0 += filter1 * (fmOutput - filterSample0 + feedback * (filterSample0 - filterSample1));\n\t\t\t\tfilterSample1 += filter2 * (filterSample0 - filterSample1);\n\t\t\t\t\n\t\t\t\tfeedbackMult += feedbackDelta;\n\t\t\t\toperator#OutputMult += operator#OutputDelta;\n\t\t\t\toperator#Phase += operator#PhaseDelta;\n\t\t\t\toperator#PhaseDelta *= phaseDeltaScale;\n\t\t\t\tfilter1 *= filterScale1;\n\t\t\t\tfilter2 *= filterScale2;\n\t\t\t\t\n\t\t\t\tconst output = filterSample1 * volume;\n\t\t\t\tvolume += volumeDelta;\n\t\t\t\t\n\t\t\t\tdata[stereoBufferIndex] += output * stereoVolume1;\n\t\t\t\tdata[(stereoBufferIndex + stereoDelay) % stereoBufferLength] += output * stereoVolume2;\n\t\t\t\tstereoBufferIndex += 2;\n\t\t\t}\n\t\t\t\n\t\t\ttone.phases[#] = operator#Phase / "+t.Config.sineWaveLength+";\n\t\t\ttone.feedbackOutputs[#] = operator#Output;\n\t\t\t\n\t\t\tconst epsilon = (1.0e-24);\n\t\t\tif (-epsilon < filterSample0 && filterSample0 < epsilon) filterSample0 = 0.0;\n\t\t\tif (-epsilon < filterSample1 && filterSample1 < epsilon) filterSample1 = 0.0;\n\t\t\ttone.filterSample0 = filterSample0;\n\t\t\ttone.filterSample1 = filterSample1;\n\t\t").split("\n"),v.operatorSourceTemplate=("\n\t\t\t\tconst operator#PhaseMix = operator#Phase/* + operator@Scaled*/;\n\t\t\t\tconst operator#PhaseInt = operator#PhaseMix|0;\n\t\t\t\tconst operator#Index    = operator#PhaseInt & "+t.Config.sineWaveMask+";\n\t\t\t\tconst operator#Sample   = sineWave[operator#Index];\n\t\t\t\toperator#Output       = operator#Sample + (sineWave[operator#Index + 1] - operator#Sample) * (operator#PhaseMix - operator#PhaseInt);\n\t\t\t\tconst operator#Scaled   = operator#OutputMult * operator#Output;\n\t\t").split("\n"),t.Synth=v}(beepbox||(beepbox={}));